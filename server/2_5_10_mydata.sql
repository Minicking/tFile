-- MySQL dump 10.13  Distrib 5.7.26, for Linux (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	5.7.26-0ubuntu0.18.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `alembic_version`
--

DROP TABLE IF EXISTS `alembic_version`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `alembic_version` (
  `version_num` varchar(32) NOT NULL,
  PRIMARY KEY (`version_num`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `alembic_version`
--

LOCK TABLES `alembic_version` WRITE;
/*!40000 ALTER TABLE `alembic_version` DISABLE KEYS */;
INSERT INTO `alembic_version` VALUES ('e17cca22e2e5');
/*!40000 ALTER TABLE `alembic_version` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `article` (
  `art_id` int(11) NOT NULL AUTO_INCREMENT,
  `art_title` varchar(100) NOT NULL,
  `art_content` longtext NOT NULL,
  `art_date` datetime NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `art_lastchange` datetime DEFAULT NULL,
  PRIMARY KEY (`art_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `article_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (1,'linux下mysql的安装','假设当前是在一个新的云服务器上第一次安装mysql。\r\n1、#wt:800#sudo apt-get update#e#命令更新软件源，\r\n2、#wt:800#apt-get install mysql-server mysql-client -y#e# 命令安装mysql\r\n3、在安装过程中会出现几个界面要求你输入mysql root用户的密码，如果不想设置直接回车可以设定为空密码。\r\n4、安装完成后输入#wt:900#mysql -uroot -p#e#，输入你设定的密码以root权限进入mysql\r\n5、输入#wt:800#show variables like \'character%\';#e#查看数据库字符集，主要看 #wt:800#character_set_database#e# 和 #wt:800#character_set_server#e# 这两条数据，默认应该是latin1，这个默认字符集是不支持中文的。\r\n6、现在退出mysql，使用 命令 #wt:800#cd /etc/mysql/conf.d#e#，然后打开目录下的mysql.cnf文件，默认里面只有一行[mysql]，这时候在下面加入一些内容：#wt:800#\r\n[mysql]\r\n[mysqld]\r\ncharacter-set-server=utf8#e#\r\n...\r\n...\r\n\r\n7、然后使用#wt:800#service mysql restart#e#命令重启mysql服务器\r\n8、现在myql就安装完毕了，并且默认字符集已经改成了utf8\r\n<br>','2019-07-09 19:30:00',3,'2019-08-21 00:02:33'),(3,'flask-migrate遇到的问题','<div>#fs:25#问题1#e#</div><div>#fs:20;wt:900#错误提示：#e##fs:16;wt:900#Can\'t locate revision identified by ‘xxxxxxxxxxxxx’#e#</div><div>这个问题是migrations文件夹内alembic迁移文件，或者说文件与数据库内alembic_version表内数据不匹配，导致输入flask db migrate -m \"xxxxxxxxxxx\"指令后无法正确创建可用的迁移文件。可以将整个migrations文件夹以及数据库中的alembic_version表全部删除，然后在项目根目录中输入flask db init指令重新创建迁移环境，然后再创建迁移脚本。</div><div><br></div><div><div>#fs:25#问题2#e#</div><div>#fs:20;wt:900#错误：#e##fs:16;wt:900#使用flask-migrate进行数据库更新的时候，字段类型和字段长度无法被检测到。#e#<br></div><div><div>#fs:15#本地数据库article表的art_date字段类型出错了，本应是datetime，结果却是date，flask-migrate默认不能获取到表字段类型和长度的改变，需要去env.py文件的run_migrations_online函数的context.configure下加入以下内容</div><div><div>#wt:300#context.configure(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; compare_type=True,&nbsp; //检查字段类型</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; compare_server_default=True&nbsp; //比较默认值</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )#e#</div></div><div>现在就可以检测到模型的字段和字段长度变化了</div><div>#e#\r\n\r\n</div></div></div><div><div>#fs:25#问题3#e#</div><div>#fs:20;wt:900#错误：#e##fs:16;wt:900#在试图给一个已有字段添加非空约束的时候表内已有的数据仍然为空，所以这个约束无法添加进去#e#</div></div><div>#fs:15#目前能想到的解决办法是手动导出原来的数据，再重建表，然后再导入，导入的同时给这个字段重新赋值。不知道有没有更好的办法，有待探索。#e#\r\n<br></div>','2019-07-10 16:04:31',3,'2019-07-12 14:44:56'),(4,'uwsgi相关问题','<div>#fs:20#问题1#e#</div><div>配置uwsgi的时候卡了很久，一直有如下报错：</div><div>#wt:900#Fatal Python error: Py_Initialize:Unable to get the locale encoding</div><div>ModuleNotFoundError:No module named \'encodings\'</div><div>#e#当时的配置文件是这样的：#wt:900#</div><div>[uwsgi]</div><div>http = 127.0.0.1:5051</div><div>pythonpath = /var/www/blog/FGBlog</div><div>virtualenv=#co(255,0,0)#/var/www/blog/#e#</div><div>module = manage</div><div>wsgi-file= %(pythonpath)/manage.py</div><div>callable = app</div><div>processes = 4</div><div>threads =2</div><div>#e#最后发现问题的关键就在于红色字体这段，因为我是用的虚拟环境是pipenv，网上教程里的主流虚拟环境都是virtualenv,virtualenv激活虚拟环境的位置就是当前虚拟环境所有所需文件的位置，所以填写这个路径是没有问题的，但是pipenv创建虚拟环境的位置和虚拟环境的文件的实际位置并不一致，可以在激活虚拟环境的位置输入#wt:900#pipenv --venv#e#指令，可以查看你的虚拟环境文件的具体位置，然后把这个路径填到配置文件的virtualenv参数中就好了。</div><div><br></div><div>#fs:20#问题2#e#<br></div><div>今天服务器运行的时候突然卡了，查看日志发现有如下报错：</div><div>#wt:900#invalid request block size: 4371 (max 4096)...skip [uwsgi-http key: 139.196.163.240:5000 client_addr: 124.160.213.126 client_port: 40262] hr_instance_read(): Connection reset by peer [plugins/http/http.c line 647]#e#</div><div>在经过搜索之后了解到，默认的uwsgi分配一个小的buffer（4k）来接收每个请求的头信息,如果在日志中看见\"invalid request block size\",它意味着你需要一个大一点的buffer，通过在配置文件中加入一个#wt:900#buffer-size#e#配置可以暂时解决这个问题，如下：</div><div>#wt:900#</div><div>[uwsgi]</div><div>.........</div><div>buffer-size = 16392</div><div>#e#<br></div><div>但是我觉得肯定还有更好的方法。。先这样吧。</div><div><br></div><div>#wt:900#发布日期:19.7.11 20:00#e#</div>','2019-07-10 16:25:08',3,'2019-07-11 19:54:32'),(10,'nginx配置问题','#fs:15#当前配置文件内容：#e#\r\n#fs:12;wt:800#worker_processes 4;        //nginx启动的进程\r\nevents { worker_connections 1024; }\r\nhttp {\r\n    include       mime.types;\r\n    default_type  application/octet-stream;\r\n    server {\r\n        listen 80;\r\n        location / {\r\n            include uwsgi_params;\r\n            uwsgi_pass 127.0.0.1:5000;  //要连接的uwsgi服务器端口\r\n              }\r\n    }\r\n}#e#\r\n简单的启动了nginx 和uwsgi，尚未进行较为高级的配置。还在学习当中。','2019-07-15 16:43:21',3,'2019-07-18 11:07:16'),(11,'访问nginx服务器502错误','<div>#fs:15;wt:400#在/var/log/nginx内查看错误日志文件，可以看到以下报错#e#</div><div>#fs:15;wt:800;co(200,50,50)#upstream sent too big header while reading response header from upstream, client: 124.160.215.209, server: , request: \"GET /static/js/index.js HTTP/1.1\", upstream: \"uwsgi://127.0.0.1:5000\", host: \"139.196.163.240\", referrer: \"http://139.196.163.240/\"#e#</div><div>#fs:15#经过搜索后了解到这个错误的原因是nginx缓冲区有一个bug造成的,我们网站的页面消耗占用缓冲区可能过大。在清除当前浏览器缓存后可解决这个问题。之所以出现这个问题应该是在写#fs:18;wt:800#文章修改#e#功能的时候我存了一个过于大的session造成的。所以在之后我将重写这个功能.\r\n\r\n\r\n更新\r\n\r\n已经重写了文章修改功能。目前一切正常。\r\n2019-7-18 10:45\r\n\r\nuwsgi服务器连不上也会出现502错误</div>','2019-07-18 09:01:32',3,'2019-07-18 12:32:26'),(13,'部署小细节','配置文件中的路径在开发环境（win10）中的时候用到的\\\\，部署到Ubuntu服务器中的时候要改成/\r\nwindows下惯用的在字符串前加个r好像没用。暂时先手动改一下好了。','2019-07-18 14:18:08',3,'2019-09-06 13:14:53'),(15,'flask-socketio的学习使用经验','#fs:20;wt:800#1、#e#\r\n刚开始把flask-socketio加入到项目中的时候遇到一个问题，运行flask run指令，出现以下报错信息：\r\n#fs:14;wt:800#ValueError: signal only works in main thread#e#\r\n经过搜索后得到一个信息：\r\n#fs:120wt:400#The problem you are facing has to do with a bug in the Flask-SocketIO package which replaces the flask run command. Due to this Flask-SocketIO is always used even if you don’t import it. There are several solutions:\r\n\r\nUninstall Flask-SocketIO\r\nDo not use flask run but run the main file of your program\r\nDisable debugging\r\nDisable auto loading if debugging required flask run --no-reload\r\nReference to the Flask-SocketIO bug: issue 817#e#\r\n\r\n大体意思是flask-socketio有一个bug，当使用flask run形式启动服务器的时候不能将FLASK_DEBUG设置为TRUE，否则就会出现这个报错。','2019-07-21 16:54:43',3,'2019-07-21 16:55:38'),(19,'python打包成exe的方法','安装pyinstall，然后使用以下指令进行打包操作。\r\n1.打包单个python文件，进入存放XXX.py的目录，打开命令窗口，直接使用pyinstaller -F XXX.py\r\n\r\n2.打包时取出CMD黑框，pyinstaller -F XXX.py --noconsole\r\n\r\n3.打包加入exe图标，pyinstaller -F -i picturename.ico -w XXX.py\r\n\r\n4.打包多个目录（多个文件），\r\npyinstaller -F -i index.ico -c index.py -p F:\\python\\auto_tools\\auto_v3check\\toolpage --hidden-import  v3check.py --hidden-import V3CRCTool-0.0.1-SNAPSHOT.jar\r\n\r\n5.打包去除控制台，pyinstaller -w xxx.py\r\n\r\n6.打包方便查看报错，可看到控制台，pyinstaller -c xxx.py','2019-08-20 23:53:04',3,NULL),(20,'实用代码系列：游戏复杂合成表计算','玩我的世界为了方便计算一下mod里的道具方块合成路线所写的一个程序。。。富文本编辑器暂时没有写支持python代码高亮的功能，下次更新补上。其实代码都有tab缩进，现在富文本编辑器没识别，tab键缩进也下次补上。\r\n\r\n#fs:15;wt:800;co(150,50,20)#2019-8-23 日更新：#e#\r\n#fs:13#tab缩进和代码显示已经做了。高亮由于功能实现较为复杂还没写完。。。。先放上来用吧\r\n这个程序已经打包成了一个exe，已经发给了别人作为一个可用的实用软件了。O(∩_∩)O#e#\r\n#python#\r\nimport json\r\nclass synthetic:\r\n	def __init__(self):\r\n		print(\'初始化合成表中...\')\r\n		self.itemList={}\r\n		self.result={}\r\n		self.initItemList(self.itemList)\r\n	def run(self,targetName,num=1):\r\n		if targetName in self.itemList:\r\n			self.clear()\r\n			self.calculate(self.itemList[targetName][\'formula\'],num)\r\n			print(\'【%s】为【%d】级物品，制造【%d】个需要消耗的材料如下所示：\'%(targetName,self.itemList[targetName][\'level\'],num))\r\n			print(\'使用说明：先将所有1级材料集齐，然后一级一级根据下面的显示来制作出更高级的材料，最后拿到所有背包剩余的材料就可以制造出你需要的最终成品了。\')\r\n			index=1\r\n			level=0\r\n			for i in self.result:\r\n				# #print(self.result[i])\r\n				if self.result[i][\'number\']&gt;0:\r\n					if self.result[i][\'level\']&gt;level:\r\n						level=self.result[i][\'level\']\r\n						index=1\r\n						print(\'\\n%d级材料\'%(level))\r\n					if self.result[i][\'level\']==1:\r\n						print(\'%d:[%s]%d个(%d组+%d个) 溢出%d个\'%(index,i,self.result[i][\'number\'],(self.result[i][\'number\']*self.itemList[i][\'number\'])//64,self.result[i][\'number\']*self.itemList[i][\'number\']-(self.result[i][\'number\']*self.itemList[i][\'number\'])//64*64,self.result[i][\'overflow\']))\r\n					else:\r\n						print(\'%d:[%s]%d次合成(最终会出现%d组+%d个)   溢出%d个\'%(index,i,self.result[i][\'number\'],(self.result[i][\'number\']*self.itemList[i][\'number\'])//64,self.result[i][\'number\']*self.itemList[i][\'number\']-(self.result[i][\'number\']*self.itemList[i][\'number\'])//64*64,self.result[i][\'overflow\']))\r\n					index+=1\r\n		else:\r\n			print(\'此物品不存在于合成表中\')\r\n	def calculate(self,formula,count):\r\n		for i in formula:\r\n			needNum=i[\'number\']*count#为了完成此次合成，当前这个物品i[\'name\']的所需数量\r\n			overflowPool=self.result[i[\'name\']][\'overflow\']#储存当前物品i[\'name\']在溢出池中的数量\r\n			if overflowPool&gt;=needNum:#判断当前材料的溢出区的存货是否足够使用\r\n				self.result[i[\'name\']][\'overflow\']-=needNum#如果有存货则优先使用存货,溢出池中的数量对应进行减少\r\n				needNum=0\r\n			else:\r\n				needNum-=overflowPool\r\n				self.result[i[\'name\']][\'overflow\']=0\r\n			makeNum=needNum//self.itemList[i[\'name\']][\'number\']\r\n			if makeNum*self.itemList[i[\'name\']][\'number\']&lt;needNum:\r\n				makeNum+=1\r\n			overflowNum=makeNum*self.itemList[i[\'name\']][\'number\']-needNum\r\n			self.result[i[\'name\']][\'number\']+=makeNum\r\n			self.result[i[\'name\']][\'overflow\']+=overflowNum\r\n			if self.itemList[i[\'name\']][\'level\']&gt;1:\r\n				self.calculate(self.itemList[i[\'name\']][\'formula\'],makeNum)\r\n	def clear(self):\r\n		for i in self.result:\r\n			self.result[i][\'number\']=0\r\n			self.result[i][\'overflow\']=0\r\n	def initItemList(self,itemList):\r\n		with open(\'data.json\',encoding=\'utf-8\') as f:\r\n			while True:\r\n				line=f.readline()\r\n				if line:\r\n					if len(line)&gt;1 and line[0:2]!=\"//\":\r\n						data=json.loads(line)\r\n						self.itemList[data[\'name\']]=data\r\n						self.result[data[\'name\']]=({\'number\':0,\'overflow\':0,\'level\':data[\'level\'],\'cost\':data[\'cost\']})\r\n				else:\r\n					break\r\n			f.close()\r\nif __name__ == \'__main__\':\r\n	t=synthetic()\r\n	while True:\r\n		targetName=input(\"输入你要计算的物品名称(要退出则输入exit):\")\r\n		if targetName!=\'exit\':\r\n			num=input(\"输入需要制作的数量:\")\r\n			t.run(targetName,int(num))\r\n			print(\'------------------------------------------------\')\r\n		else:\r\n			break\r\n#endpython#\r\n#fs:20;wt:800#这是data.json文件，用来存储材料数据的#e#\r\n#python#\r\n{\"name\":\"铁锭\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"钻石\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"红石\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"金锭\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"木板\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"糖\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"天然铀\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"铁栏杆\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"水桶\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"绿宝石\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"岩浆桶\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"煤炭\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"马铃薯\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"下界石英\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"金粒\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"红石中继器\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"红石火把\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"石质压力板\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"仙人掌绿\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"铜粉\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"铁粉\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"锌粉\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"铝粉\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"金粉\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"地狱岩\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"碗\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n{\"name\":\"石头\",\"level\":1,\"formula\":null,\"number\":1,\"cost\":1}\r\n\r\n{\"name\":\"金质锅炉\",\"level\":2,\"formula\":[{\"name\":\"石头\",\"number\":5},{\"name\":\"碗\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"铜锭\",\"level\":2,\"formula\":[{\"name\":\"铜粉\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"金条4K\",\"level\":2,\"formula\":[{\"name\":\"金粉\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"锌锭\",\"level\":2,\"formula\":[{\"name\":\"锌粉\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"硫酸铜\",\"level\":2,\"formula\":[{\"name\":\"地狱岩\",\"number\":16}],\"number\":1,\"cost\":1}\r\n{\"name\":\"镍锭\",\"level\":2,\"formula\":[{\"name\":\"铜粉\",\"number\":1},{\"name\":\"铁锭\",\"number\":1},{\"name\":\"铁粉\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"生物乙醇\",\"level\":2,\"formula\":[{\"name\":\"马铃薯\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"电路主板\",\"level\":2,\"formula\":[{\"name\":\"石质压力板\",\"number\":1},{\"name\":\"仙人掌绿\",\"number\":1}],\"number\":2,\"cost\":1}\r\n{\"name\":\"石英粉末\",\"level\":2,\"formula\":[{\"name\":\"下界石英\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"量子机械制造框架\",\"level\":2,\"formula\":[{\"name\":\"铁锭\",\"number\":4},{\"name\":\"铁栏杆\",\"number\":4}],\"number\":1,\"cost\":1}\r\n{\"name\":\"10K能量电池\",\"level\":2,\"formula\":[{\"name\":\"木板\",\"number\":5},{\"name\":\"糖\",\"number\":1},{\"name\":\"红石\",\"number\":1},{\"name\":\"金锭\",\"number\":2}],\"number\":1,\"cost\":1}\r\n{\"name\":\"充电铁锭\",\"level\":2,\"formula\":[{\"name\":\"铁锭\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"充电金锭\",\"level\":2,\"formula\":[{\"name\":\"金锭\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"贫铀合金\",\"level\":2,\"formula\":[{\"name\":\"天然铀\",\"number\":1}],\"number\":1,\"cost\":1}\r\n\r\n\r\n\r\n{\"name\":\"钴锭\",\"level\":3,\"formula\":[{\"name\":\"铜粉\",\"number\":1},{\"name\":\"镍锭\",\"number\":1},{\"name\":\"铁粉\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"硅晶片\",\"level\":3,\"formula\":[{\"name\":\"石英粉末\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"蓄电池I\",\"level\":3,\"formula\":[{\"name\":\"锌锭\",\"number\":2},{\"name\":\"硫酸铜\",\"number\":2},{\"name\":\"铜锭\",\"number\":2},{\"name\":\"红石\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"高级乙醇溶剂\",\"level\":3,\"formula\":[{\"name\":\"生物乙醇\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"简易的集成电路\",\"level\":3,\"formula\":[{\"name\":\"电路主板\",\"number\":4},{\"name\":\"金粒\",\"number\":3},{\"name\":\"红石中继器\",\"number\":1},{\"name\":\"红石火把\",\"number\":1}],\"number\":2,\"cost\":1}\r\n{\"name\":\"50K能量电池\",\"level\":3,\"formula\":[{\"name\":\"充电铁锭\",\"number\":3},{\"name\":\"10K能量电池\",\"number\":3},{\"name\":\"红石\",\"number\":1},{\"name\":\"金锭\",\"number\":2}],\"number\":1,\"cost\":1}\r\n{\"name\":\"坚韧的机械框架\",\"level\":3,\"formula\":[{\"name\":\"充电铁锭\",\"number\":4},{\"name\":\"量子机械制造框架\",\"number\":1}],\"number\":1,\"cost\":1}\r\n\r\n\r\n\r\n{\"name\":\"500K能量电池\",\"level\":4,\"formula\":[{\"name\":\"充电铁锭\",\"number\":1},{\"name\":\"50K能量电池\",\"number\":5},{\"name\":\"红石\",\"number\":1},{\"name\":\"钻石\",\"number\":2}],\"number\":1,\"cost\":1}\r\n{\"name\":\"集成电路板\",\"level\":4,\"formula\":[{\"name\":\"硅晶片\",\"number\":1},{\"name\":\"简易的集成电路\",\"number\":1},{\"name\":\"充电金锭\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"磁铁\",\"level\":4,\"formula\":[{\"name\":\"钴锭\",\"number\":1},{\"name\":\"镍锭\",\"number\":1},{\"name\":\"铝粉\",\"number\":1},{\"name\":\"铁粉\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"贫铀合金机械框架\",\"level\":4,\"formula\":[{\"name\":\"贫铀合金\",\"number\":4},{\"name\":\"充电铁锭\",\"number\":4},{\"name\":\"坚韧的机械框架\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"电势激发器\",\"level\":4,\"formula\":[{\"name\":\"简易的集成电路\",\"number\":2},{\"name\":\"量子机械制造框架\",\"number\":5},{\"name\":\"红石\",\"number\":2}],\"number\":1,\"cost\":1}\r\n\r\n\r\n{\"name\":\"1000K超大功率电池\",\"level\":5,\"formula\":[{\"name\":\"绿宝石\",\"number\":3},{\"name\":\"煤炭\",\"number\":2},{\"name\":\"充电铁锭\",\"number\":1},{\"name\":\"500K能量电池\",\"number\":3}],\"number\":1,\"cost\":1}\r\n{\"name\":\"电磁铁\",\"level\":5,\"formula\":[{\"name\":\"镍锭\",\"number\":1},{\"name\":\"磁铁\",\"number\":1},{\"name\":\"钴锭\",\"number\":1},{\"name\":\"蓄电池I\",\"number\":1}],\"number\":1,\"cost\":1}\r\n\r\n\r\n{\"name\":\"聚变材料加工中心\",\"level\":6,\"formula\":[{\"name\":\"贫铀合金机械框架\",\"number\":4},{\"name\":\"水桶\",\"number\":1},{\"name\":\"高级乙醇溶剂\",\"number\":2},{\"name\":\"1000K超大功率电池\",\"number\":2}],\"number\":1,\"cost\":1}\r\n{\"name\":\"核聚变反应堆\",\"level\":6,\"formula\":[{\"name\":\"集成电路板\",\"number\":2},{\"name\":\"贫铀合金机械框架\",\"number\":4},{\"name\":\"1000K超大功率电池\",\"number\":1},{\"name\":\"岩浆桶\",\"number\":1},{\"name\":\"高级乙醇溶剂\",\"number\":1}],\"number\":1,\"cost\":1}\r\n{\"name\":\"电动马达\",\"level\":6,\"formula\":[{\"name\":\"电磁铁\",\"number\":1},{\"name\":\"铜锭\",\"number\":6}],\"number\":1,\"cost\":1}\r\n\r\n\r\n{\"name\":\"自动筛选机\",\"level\":7,\"formula\":[{\"name\":\"电动马达\",\"number\":1},{\"name\":\"金条4K\",\"number\":4},{\"name\":\"铁锭\",\"number\":2},{\"name\":\"水桶\",\"number\":2}],\"number\":1,\"cost\":1}\r\n{\"name\":\"自动淘金机\",\"level\":7,\"formula\":[{\"name\":\"电动马达\",\"number\":1},{\"name\":\"金条4K\",\"number\":4},{\"name\":\"铁锭\",\"number\":2},{\"name\":\"金质锅炉\",\"number\":2}],\"number\":1,\"cost\":1}\r\n#endpython#','2019-08-20 23:59:48',3,'2019-08-23 17:40:23'),(21,'更新日志：2019-8-23 第一次更新','#co(255,100,20)#以前更新都太乱了，没留日志，从这次更新开始，加入一个更新日志。#e#\r\n#fs:20;wt:800#1、富文本编辑器加入代码文本显示功能#e#\r\n#python#\r\n显示效果就像这样，编辑的时候#号加标签两边，两个标签，python开头，endpython结尾，内容写在两个标签中间。\r\n#endpython#\r\n代码文本显示区域不可以嵌套，但是可以有多个，比如上面有一个了，下面再来一个：\r\n#python#\r\n就像这样。代码高亮还没写完\r\n#endpython#\r\n#fs:20;wt:800#2、富文本编辑器支持tab键缩进#e#\r\n但是还没修改对应写文章页面的js，不能直接在输入框内按tab键来进行缩进，只能是在本地软件中写好，再复制到这里来进行显示。比如这样：\r\n#python#\r\n		简单测试，这是一个tab的缩进效果\r\n				这是两个tab的缩进效果\r\n#endpython#\r\n#fs:20;wt:800#3、由于太久没更新，断断续续的在我的电脑上写功能，已经忘了到底改了哪些东西了#e#\r\n不过有个确定的是聊天室的websocket出了点问题，暂时没法聊天\r\n<br>','2019-08-23 16:56:06',3,'2019-08-25 00:41:46'),(22,'富文本编辑器使用教程','#fs:20;wt:800#说明：这个网站的富文本编辑器没用markdown，我自己写了一个功能简陋的。#e#\r\n#python#\r\n基础语法为:\r\n#fs:50;wt:800;co(255,105,50)#测试内容#e#\r\n以上就是一条加入了样式的内容，正常显示的效果如下所示：\r\n#endpython#\r\n#fs:50;wt:800;co(255,105,50)#测试内容#e#\r\n#python#\r\nfs代表font-size，表示被标记的文字的大小，单位为px\r\nwt代表weight，表示被标记文字的粗细程度，取值范围100-900，只取百的倍数\r\nco为color，表示颜色的rgb值\r\n这三个样式代码的顺序可随意，也可以只用其中的一个或多个。\r\n比如#co(155,100,0);fs:22#测试内容#e#也是合法的。效果如下所示：\r\n#endpython#\r\n#co(155,100,0);fs:22#测试内容#e#\r\n\r\n#python#\r\n每一个标记要由#e#进行结尾，每一个#fs:XX;wt:XX;co(X,X,X)#要有一个#e#进行结尾。可以进行嵌套，比如：\r\n#fs:30#abcde#wt:800;fs:40#f#co(255,0,0)#g#e##e#hijklmn#e#\r\n显示效果如下所示：\r\n#endpython#\r\n#fs:30#abcde#wt:800;fs:40#f#co(255,0,0)#g#e##e#hijklmn#e#\r\n\r\n\r\n#fs:20;wt:800;co(200,50,50)#------------可爱的分割线---------------#e#\r\n\r\n\r\n#python#\r\n还有个功能是显示代码文本，就是现在这个黑框区域。\r\n创建一个这样的区域的语法为#python#开头，endpython结尾，当然endpython也要用两个#括起来。\r\n由于直接在这里括起来会导致文本区域提前判定为结束，所以没法直接写出来。\r\n这个代码文本显示区域的原本用意是用来显示python代码，并支持python语法高亮，所以是用python作为标签。当然用来显示一些其他代码或者文本也是可以的。\r\n还有一个注意的是代码文本区域是不解析这个富文本编辑器的样式标签的。\r\n#endpython#','2019-08-23 17:13:38',3,'2019-08-23 17:15:36'),(23,'聊天室无法正常使用问题解析','通过查看日志发现如下报错：\r\n#python#RuntimeError: You need to use the eventlet server. See the Deployment section of the documentation for more information.#endpython#\r\n#fs:20;wt:800#在网上查找资料后得到如下信息：#e#\r\n#wt:500#最新的flask_socketio 使用的是python-socketio\r\n\r\n如果在包中安装了gevent或evenlet，在服务器上使用时，就会报错\r\n\r\nRuntimeError: You need to use the eventlet server. See the Deployment section of the documentation for more information\r\n卸载gevent和evenlet有关的库，卸载后就好了\r\n\r\n \r\n\r\n经测试发现,如果是用uwsgi启动，采用eventlet模式，process只能设置1个，且会造成线程堵塞，如果设置超过1个，也会报上面的错误#e#\r\n\r\n#fs:20;wt:800;co(255,0,0)#以上是搜索到的资料，但是我还没进行测试。o(╯□╰)o#e#\r\n根据以上资料判断，我用的是uwsgi作为web服务器，process设置的确实不是1个，而是4个，同时我也安装了gevent和evenlet。可能问题确实在这。','2019-08-23 17:23:37',3,'2019-08-23 17:36:37'),(24,'数据结构&算法：链表快速排序 C++实现（非递归）','#fs:16;wt:800#用的有头双向链表加上一个节点链表栈实现的非递归链表快速排序#e#\r\n#python#fastsort.cpp文件\r\n\r\n#include\"stack.h\"\r\n#include&lt;conio.h&gt;\r\nusing namespace std;\r\nvoid inputData(linklistDH*ll){\r\n	int x=3;\r\n	for(int i=1;i&lt;=10;i++){\r\n		x=i*i*i*2+i*i*3+4;\r\n		ll-&gt;addNode(x%5);\r\n	}\r\n	ll-&gt;display();\r\n}\r\nint main(){\r\n	\r\n	stack*Stack=new stack();\r\n	linklistDH*ll=new linklistDH();\r\n	bool sortMethods=false;//true为顺序，false为逆序 \r\n	inputData(ll);\r\n	Stack-&gt;push(ll-&gt;findNodeIndex(1)-&gt;lastNode);\r\n	Stack-&gt;push(ll-&gt;findNodeIndex(ll-&gt;getLength()));\r\n	Stack-&gt;display();\r\n	cout&lt;&lt;\"开始排序\"&lt;&lt;endl;\r\n	while(Stack-&gt;getLength()&gt;0){\r\n		system(\"cls\");\r\n		ll-&gt;display();\r\n		Stack-&gt;display();\r\n		struct node*i,*j,*t,*base;\r\n		Stack-&gt;display();\r\n		cout&lt;&lt;\"开始出栈获取头尾：\"&lt;&lt;endl;\r\n		j=Stack-&gt;top();\r\n		cout&lt;&lt;\"拿到了尾\"&lt;&lt;endl;\r\n		i=Stack-&gt;top();\r\n		cout&lt;&lt;\"拿到了头\"&lt;&lt;endl;\r\n		base=i-&gt;nextNode;\r\n		cout&lt;&lt;\"定义了基准\"&lt;&lt;base-&gt;data&lt;&lt;endl;\r\n		t=base-&gt;nextNode;\r\n		cout&lt;&lt;\"定义了迭代指针\"&lt;&lt;endl;\r\n		cout&lt;&lt;\"拿到此次递归的头尾节点数据：头：\"&lt;&lt;i-&gt;nextNode-&gt;data&lt;&lt;\" 尾:\"&lt;&lt;j-&gt;data&lt;&lt;\" 基准:\"&lt;&lt;base-&gt;data&lt;&lt;endl;\r\n		while(1){\r\n			if(t!=j-&gt;nextNode&amp;&amp;t!=NULL){\r\n				cout&lt;&lt;\"当前遍历指针还未执行到尾部 t=\"&lt;&lt;t-&gt;data&lt;&lt;endl;\r\n				if(sortMethods==true?t-&gt;data&gt;=base-&gt;data:t-&gt;data&lt;=base-&gt;data){\r\n					cout&lt;&lt;\"执行一次插入：\"&lt;&lt;t-&gt;data&lt;&lt;\"插入到\"&lt;&lt;base-&gt;data&lt;&lt;\"前面\"&lt;&lt;endl;\r\n					if(t-&gt;nextNode==NULL){\r\n						j=t-&gt;lastNode;\r\n					}\r\n					ll-&gt;insertBeforNode(base,t);\r\n					t=base-&gt;nextNode;\r\n				}else{\r\n					cout&lt;&lt;\"没有大小冲突\"&lt;&lt;endl;\r\n					t=t-&gt;nextNode;\r\n				}\r\n			}else{\r\n				cout&lt;&lt;\"当前遍历指针到达尾部\"&lt;&lt;endl;\r\n				if(i-&gt;nextNode!=base&amp;&amp;i-&gt;nextNode!=base-&gt;lastNode&amp;&amp;i!=base){\r\n					cout&lt;&lt;\"入栈：\"&lt;&lt;i-&gt;data&lt;&lt;\",\"&lt;&lt;base-&gt;lastNode-&gt;data&lt;&lt;endl;\r\n					Stack-&gt;push(i);\r\n					Stack-&gt;push(base-&gt;lastNode);\r\n				}\r\n				if(base-&gt;nextNode!=j&amp;&amp;base-&gt;lastNode!=j&amp;&amp;base!=j){\r\n					cout&lt;&lt;\"入栈：\"&lt;&lt;base-&gt;data&lt;&lt;\",\"&lt;&lt;j-&gt;data&lt;&lt;endl;\r\n					Stack-&gt;push(base);\r\n					Stack-&gt;push(j);\r\n				}\r\n				break;\r\n			}\r\n		}\r\n		cout&lt;&lt;\"单次递归结束\"&lt;&lt;endl;\r\n		ll-&gt;display();\r\n		Stack-&gt;display();\r\n		getch();\r\n	}\r\n	cout&lt;&lt;\"排序结束\"&lt;&lt;endl;\r\n	ll-&gt;display();\r\n	return 0;\r\n}\r\n#endpython#','2019-08-23 17:29:20',3,'2019-08-23 17:48:24'),(25,'数据结构&算法：两种链表的C++实现','#python#linklist.h文件\r\n\r\n\r\n#include \"base.h\"\r\nusing namespace std;\r\n//无头单向链表 \r\nclass linklist{\r\n	private:\r\n		struct node*Head;\r\n		int length;\r\n	public:\r\n		//******以下为基础操作方法******** \r\n		\r\n		//初始化链表 \r\n		void init(int headData){\r\n			this-&gt;Head=(struct node*)malloc(sizeof(struct node));\r\n			this-&gt;Head-&gt;init(headData);\r\n			this-&gt;length=1;\r\n		}\r\n		linklist(int headData){\r\n			this-&gt;init(headData);\r\n		}\r\n		//析构函数\r\n		~ linklist(){\r\n			struct node*iterator=this-&gt;Head;\r\n			while(iterator!=NULL){\r\n				struct node*t=iterator;\r\n				iterator=iterator-&gt;nextNode;\r\n				free(t);\r\n			}\r\n			cout&lt;&lt;\"删除一条链表\"&lt;&lt;endl;\r\n		}\r\n		//根据下标搜索指定节点 \r\n		struct node*findNodeIndex(int index){\r\n			if(index==1){\r\n				return this-&gt;Head;\r\n			}else{\r\n				struct node*finder=this-&gt;Head;\r\n				for(int i=1;i&lt;index;i++){\r\n					if(finder==NULL){\r\n						return ERROR;\r\n					}\r\n					finder=finder-&gt;nextNode;\r\n				}\r\n				return finder;\r\n			}\r\n			\r\n		}\r\n		//把新的数据插入到指定下标所在位置 \r\n		int insertNodeIndex(int index,int data){\r\n			if(index&gt;1){\r\n				index--;\r\n				struct node*iterator=this-&gt;Head;\r\n				for(int i=1;i&lt;index;i++){\r\n					if(iterator==NULL){\r\n						return ERROR_INDEX;\r\n					}\r\n					iterator=iterator-&gt;nextNode;\r\n				}\r\n				if(iterator==NULL){\r\n					return ERROR_INDEX;\r\n				}\r\n				struct node*t=iterator-&gt;nextNode;\r\n				iterator-&gt;nextNode=(struct node*)malloc(sizeof(struct node));\r\n				iterator-&gt;nextNode-&gt;init(data);\r\n				iterator-&gt;nextNode-&gt;nextNode=t;\r\n				this-&gt;length++;\r\n				return SUCCESS;\r\n			}else{\r\n				struct node*t=this-&gt;Head;\r\n				this-&gt;Head=(struct node*)malloc(sizeof(struct node));\r\n				this-&gt;Head-&gt;init(data);\r\n				this-&gt;Head-&gt;nextNode=t;\r\n				this-&gt;length++;\r\n				return SUCCESS;\r\n			}\r\n			\r\n			\r\n		}\r\n		//在链表尾部插入一个新的数据 \r\n		int addNode(int data){\r\n			struct node*finder=this-&gt;Head;\r\n			if(finder!=NULL){\r\n				while(finder-&gt;nextNode!=NULL){\r\n					finder=finder-&gt;nextNode;\r\n				}\r\n				finder-&gt;nextNode=(struct node*)malloc(sizeof(struct node));\r\n				finder-&gt;nextNode-&gt;init(data);\r\n				this-&gt;length++;\r\n				return SUCCESS;\r\n			}else{\r\n				this-&gt;Head=(struct node*)malloc(sizeof(struct node));\r\n				this-&gt;Head-&gt;init(data);\r\n				this-&gt;length++;\r\n				return SUCCESS;\r\n			}\r\n			\r\n		}\r\n		//删除指定下标的数据节点 \r\n		int delNodeIndex(int index){\r\n			if(index&gt;1){\r\n				struct node*head=findNodeIndex(index-1);\r\n				struct node*target=findNodeIndex(index);\r\n				if(target!=NULL){\r\n					head-&gt;nextNode=target-&gt;nextNode;\r\n					free(target);\r\n					this-&gt;length--;\r\n					return SUCCESS;\r\n				}else{\r\n					return ERROR_DEL;	\r\n				}\r\n			}else if(index==1){\r\n				struct node*target=this-&gt;Head;\r\n				this-&gt;Head=target-&gt;nextNode;\r\n				free(target);\r\n				this-&gt;length--;\r\n				return SUCCESS;\r\n			}\r\n		}\r\n		//删除尾部数据节点 \r\n		int delNode(){\r\n			struct node*iterator=this-&gt;Head;\r\n			if(iterator!=NULL){\r\n				if(iterator-&gt;nextNode!=NULL){\r\n					while(iterator-&gt;nextNode-&gt;nextNode!=NULL){\r\n						iterator=iterator-&gt;nextNode;\r\n					}\r\n					free(iterator-&gt;nextNode);\r\n					iterator-&gt;nextNode=NULL;\r\n					this-&gt;length--;\r\n					return SUCCESS_DELNODE;\r\n				}else{\r\n					this-&gt;Head=NULL;\r\n					free(iterator);\r\n					this-&gt;length--;\r\n					return SUCCESS_DELLINKLIST;\r\n				}\r\n			}else{\r\n				return ERROR_DELNODE;\r\n			}	\r\n		}\r\n		int swapNode(){\r\n			\r\n		}\r\n		//输出链表基本信息 \r\n		void output(){\r\n			struct node*iterator=this-&gt;Head;\r\n			cout&lt;&lt;\"\\n-------------------------------------------\\n\"&lt;&lt;endl;\r\n			cout&lt;&lt;\"节点数据：\"&lt;&lt;endl;\r\n			while(iterator!=NULL){\r\n				cout&lt;&lt;iterator-&gt;data&lt;&lt;\" \";\r\n				iterator=iterator-&gt;nextNode;\r\n			}\r\n			cout&lt;&lt;\"\\n节点总数：\"&lt;&lt;this-&gt;length&lt;&lt;endl;\r\n		}\r\n		//*************以下为进阶操作方法*******************\r\n		\r\n		//对链表进行排序 type=1表示正序 type=2表示逆序，methods=1表示冒泡排序，methods=2表示选择排序 \r\n		int sort(int type,int methods=1){\r\n			if(!(methods!=1&amp;&amp;methods!=2&amp;&amp;type!=1&amp;&amp;type!=2)){\r\n				if(this-&gt;length&lt;=1){\r\n					return SUCCESS;\r\n				}else{\r\n					if(methods==1){//链表冒泡排序 \r\n						for(int i=1;i&lt;=this-&gt;length;i++){\r\n							struct node*iterator=this-&gt;Head;\r\n							if(iterator-&gt;nextNode!=NULL){\r\n								if(type==1?iterator-&gt;data&lt;iterator-&gt;nextNode-&gt;data:iterator-&gt;data&gt;iterator-&gt;nextNode-&gt;data){\r\n									struct node*t=iterator-&gt;nextNode;\r\n									this-&gt;Head=iterator-&gt;nextNode;\r\n									iterator-&gt;nextNode=iterator-&gt;nextNode-&gt;nextNode;\r\n									t-&gt;nextNode=iterator;\r\n								}\r\n								iterator=this-&gt;Head;\r\n							}\r\n							while(iterator-&gt;nextNode-&gt;nextNode!=NULL){\r\n								if(type==1?iterator-&gt;nextNode-&gt;data&lt;iterator-&gt;nextNode-&gt;nextNode-&gt;data:iterator-&gt;nextNode-&gt;data&gt;iterator-&gt;nextNode-&gt;nextNode-&gt;data){\r\n									struct node*t=iterator-&gt;nextNode;\r\n									iterator-&gt;nextNode=iterator-&gt;nextNode-&gt;nextNode;\r\n									t-&gt;nextNode=iterator-&gt;nextNode-&gt;nextNode;\r\n									iterator-&gt;nextNode-&gt;nextNode=t;	\r\n								}\r\n								iterator=iterator-&gt;nextNode;\r\n							}\r\n						}\r\n						return SUCCESS;\r\n					}\r\n				}\r\n			}\r\n			return ERROR_SORT;\r\n		}\r\n			\r\n		\r\n};\r\n//有头双向链表 \r\nclass linklistDH{\r\n	private:\r\n		struct node*Head;\r\n		int length;\r\n	public:\r\n		linklistDH(){\r\n			this-&gt;length=0;\r\n			this-&gt;Head=(struct node*)malloc(sizeof(struct node));\r\n			this-&gt;Head-&gt;init();\r\n		}\r\n		int getLength(){\r\n			return this-&gt;length;\r\n		}\r\n		//addNode 在头部添加一个节点\r\n		int addNode(int data){\r\n			struct node*newNode=(struct node*)malloc(sizeof(struct node));\r\n			newNode-&gt;init(data);\r\n			struct node*t=this-&gt;Head-&gt;nextNode;\r\n			newNode-&gt;nextNode=t;\r\n			if(t!=NULL){\r\n				t-&gt;lastNode=newNode;\r\n			}\r\n			newNode-&gt;lastNode=this-&gt;Head;\r\n			this-&gt;Head-&gt;nextNode=newNode;\r\n			this-&gt;length++;\r\n			return SUCCESS;\r\n			\r\n		}\r\n		//让一个指定节点插入到另一个节点的前面\r\n		int insertBeforNode(struct node*A,struct node*B){\r\n			struct node*A1=A-&gt;lastNode;\r\n			struct node*A2=A-&gt;nextNode;\r\n			struct node*B1=B-&gt;lastNode;\r\n			struct node*B2=B-&gt;nextNode;\r\n			if(A2!=B&amp;&amp;B2!=A){\r\n				B1-&gt;nextNode=B2;\r\n				if(B2!=NULL)\r\n					B2-&gt;lastNode=B1;\r\n				A1-&gt;nextNode=B;\r\n				B-&gt;lastNode=A1;\r\n				B-&gt;nextNode=A;\r\n				A-&gt;lastNode=B;\r\n			}else{\r\n				if(A2==B){\r\n					//cout&lt;&lt;\"合法的相邻插入\"&lt;&lt;endl;\r\n					A1-&gt;nextNode=B;\r\n					//cout&lt;&lt;1;\r\n					B-&gt;lastNode=A1;\r\n					//cout&lt;&lt;2;\r\n					B-&gt;nextNode=A;\r\n					//cout&lt;&lt;3;\r\n					A-&gt;lastNode=B;\r\n					//cout&lt;&lt;4;\r\n					A-&gt;nextNode=B2;\r\n					//cout&lt;&lt;5;\r\n					if(B2!=NULL)\r\n					{\r\n						//cout&lt;&lt;6;\r\n						B2-&gt;lastNode=A;	\r\n					}else{\r\n						//cout&lt;&lt;66;\r\n					}\r\n						\r\n					\r\n				}\r\n			}\r\n			return SUCCESS;\r\n		}\r\n		//显示链表信息 \r\n		void display(){\r\n			struct node*iterator=this-&gt;Head-&gt;nextNode;\r\n			cout&lt;&lt;endl&lt;&lt;\"总节点数:\"&lt;&lt;this-&gt;length&lt;&lt;endl;\r\n			while(iterator!=NULL){\r\n				cout&lt;&lt;\"节点ID：\"&lt;&lt;iterator-&gt;id&lt;&lt;\" 节点数据：\"&lt;&lt;iterator-&gt;data&lt;&lt;\" 上节点：\"&lt;&lt;((iterator-&gt;lastNode!=NULL&amp;&amp;iterator-&gt;lastNode!=this-&gt;Head)?iterator-&gt;lastNode-&gt;data:0)&lt;&lt;\"  下节点:\"&lt;&lt;(iterator-&gt;nextNode!=NULL?iterator-&gt;nextNode-&gt;data:0)&lt;&lt;endl;;\r\n				\r\n				iterator=iterator-&gt;nextNode;\r\n			}\r\n		}\r\n		//findNodeIndex 搜索指定索引的节点 \r\n		struct node* findNodeIndex(int index){\r\n			struct node*iterator=this-&gt;Head;\r\n			if(index&gt;0&amp;&amp;index&lt;=this-&gt;length){\r\n				for(int i=0;i&lt;index;i++){\r\n					iterator=iterator-&gt;nextNode;\r\n				}\r\n				return iterator;\r\n			}else{\r\n				return NULL;\r\n			}\r\n		}\r\n		//insertNodeIndex 添加一个节点，此节点的索引为指定值\r\n		int insertNodeIndex(int index,int data){\r\n			struct node*newNode=(struct node*)malloc(sizeof(struct node));\r\n			newNode-&gt;init(data);\r\n			struct node*iterator=this-&gt;Head;\r\n			if(index&gt;=this-&gt;length+1){\r\n				if(index==this-&gt;length+1){\r\n					while(iterator-&gt;nextNode!=NULL){\r\n						iterator=iterator-&gt;nextNode;\r\n					}\r\n					iterator-&gt;nextNode=newNode;\r\n					newNode-&gt;lastNode=iterator;\r\n				}else{\r\n					return ERROR_INDEX;\r\n				}\r\n			}else{\r\n				if(index&lt;=0){\r\n					return ERROR_INDEX;\r\n				}\r\n				for(int i=0;i&lt;index;i++){\r\n					iterator=iterator-&gt;nextNode;\r\n				}\r\n				iterator-&gt;lastNode-&gt;nextNode=newNode;\r\n				newNode-&gt;lastNode=iterator-&gt;lastNode;\r\n				newNode-&gt;nextNode=iterator;\r\n				iterator-&gt;lastNode=newNode;\r\n			}\r\n			this-&gt;length++;\r\n			return SUCCESS;\r\n		}\r\n		//deleteNodeIndex 删除一个指定索引的节点 \r\n		int deleteNodeIndex(int index){\r\n			struct node*iterator=this-&gt;findNodeIndex(index);\r\n			if(iterator!=NULL){\r\n				iterator-&gt;lastNode-&gt;nextNode=iterator-&gt;nextNode;\r\n				if(iterator-&gt;nextNode!=NULL){\r\n					iterator-&gt;nextNode-&gt;lastNode=iterator-&gt;lastNode;\r\n				}\r\n				free(iterator);\r\n				this-&gt;length--;\r\n				return SUCCESS;\r\n			}else{\r\n				return ERROR_INDEX;\r\n			}\r\n		}\r\n		//deleteNode 删除尾部的节点\r\n		int deleteNode(){\r\n			if(this-&gt;length&gt;0){\r\n				struct node *t=this-&gt;Head-&gt;nextNode;\r\n				this-&gt;Head-&gt;nextNode=t-&gt;nextNode;\r\n				if(t-&gt;nextNode!=NULL){\r\n					t-&gt;nextNode-&gt;lastNode=this-&gt;Head;\r\n				}\r\n				free(t);\r\n			}else{\r\n				return ERROR_DELNODE;\r\n			}\r\n			this-&gt;length--;\r\n			return SUCCESS;\r\n		}\r\n		\r\n		//swapNode 交换两个节点的位置 \r\n		int swapNode(struct node*A,struct node*B){\r\n			struct node*temp1=A-&gt;lastNode;\r\n			struct node*temp2=A-&gt;nextNode;\r\n			struct node*temp3=B-&gt;lastNode;\r\n			struct node*temp4=B-&gt;nextNode;\r\n			if(temp2==B||temp4==A){\r\n				if(temp2==B){\r\n					temp1-&gt;nextNode=B;\r\n					if(temp4!=NULL){\r\n						temp4-&gt;lastNode=A;\r\n					}\r\n					A-&gt;nextNode=temp4;\r\n					B-&gt;lastNode=temp1;\r\n					B-&gt;nextNode=A;\r\n					A-&gt;lastNode=B;\r\n				}else{\r\n					temp3-&gt;nextNode=A;\r\n					if(temp2!=NULL){\r\n						temp2-&gt;lastNode=B;\r\n					}\r\n					B-&gt;nextNode=temp2;\r\n					A-&gt;lastNode=temp3;\r\n					A-&gt;nextNode=B;\r\n					B-&gt;lastNode=A;\r\n				}\r\n				return SUCCESS;\r\n			}else{\r\n				temp1-&gt;nextNode=B;\r\n				B-&gt;lastNode=temp1;\r\n				B-&gt;nextNode=temp2;\r\n				if(temp2!=NULL){\r\n					temp2-&gt;lastNode=B;\r\n				}\r\n				temp3-&gt;nextNode=A;\r\n				A-&gt;lastNode=temp3;\r\n				A-&gt;nextNode=temp4;\r\n				if(temp4!=NULL){\r\n					temp4-&gt;lastNode=B;\r\n				}\r\n				return SUCCESS;\r\n			}\r\n			\r\n		}\r\n		//*********************进阶操作***************************\r\n		int sort(int type=1){\r\n			if(this-&gt;length&lt;=1){\r\n				return SUCCESS;\r\n			}\r\n			if(type==1){//链表冒泡排序 \r\n				for(int i=0;i&lt;this-&gt;length;i++){\r\n					struct node*iterator=this-&gt;Head;\r\n					while(iterator-&gt;nextNode-&gt;nextNode!=NULL){\r\n						if(type==1?iterator-&gt;nextNode-&gt;data&gt;iterator-&gt;nextNode-&gt;nextNode-&gt;data:iterator-&gt;nextNode-&gt;data&lt;iterator-&gt;nextNode-&gt;nextNode-&gt;data){\r\n							this-&gt;swapNode(iterator-&gt;nextNode,iterator-&gt;nextNode-&gt;nextNode);\r\n						}\r\n						iterator=iterator-&gt;nextNode;\r\n					}\r\n				}\r\n				return SUCCESS;\r\n			}\r\n		}\r\n};\r\n#endpython#','2019-08-23 17:31:05',3,NULL),(26,'数据结构&算法：栈 C++实现','#python#stack.h文件\r\n特殊说明的是，这个栈是用来辅助实现链表快速排序用的，栈内元素为链表节点。\r\n#include \"linklist.h\"\r\nusing namespace std;\r\n\r\nstruct nodeStack{\r\n	struct node*data;\r\n	struct nodeStack*nextNode;\r\n	int init(struct node*data){\r\n		this-&gt;data=data;\r\n		this-&gt;nextNode=NULL;\r\n	}\r\n};\r\nclass stack{\r\n	private:\r\n		struct nodeStack*Head;\r\n		int length;\r\n	public:\r\n		stack(){\r\n			this-&gt;Head=(struct nodeStack*)malloc(sizeof(struct nodeStack));\r\n			this-&gt;Head-&gt;init(NULL);\r\n			this-&gt;length=0;\r\n		}\r\n		int getLength(){\r\n			return this-&gt;length;\r\n		}\r\n		int push(struct node*n){\r\n			struct nodeStack*newNode=(struct nodeStack*)malloc(sizeof(struct nodeStack));\r\n			newNode-&gt;init(n);\r\n			newNode-&gt;nextNode=this-&gt;Head-&gt;nextNode;\r\n			this-&gt;Head-&gt;nextNode=newNode;\r\n			this-&gt;length++;\r\n		}\r\n		struct node* top(){\r\n			if(this-&gt;Head-&gt;nextNode!=NULL){\r\n				struct nodeStack*t=this-&gt;Head-&gt;nextNode;\r\n				struct node*r=t-&gt;data;\r\n				this-&gt;Head-&gt;nextNode=t-&gt;nextNode;\r\n				free(t);\r\n				this-&gt;length--;\r\n				return r;\r\n			}\r\n			return NULL;\r\n			\r\n		}\r\n		void display(){\r\n			struct nodeStack*iterator=this-&gt;Head-&gt;nextNode;\r\n			cout&lt;&lt;\"栈内元素有\"&lt;&lt;this-&gt;length&lt;&lt;\"个\"&lt;&lt;endl;\r\n			while(iterator!=NULL){\r\n				cout&lt;&lt;\"&lt;[\"&lt;&lt;iterator-&gt;data-&gt;id&lt;&lt;\"](\"&lt;&lt;iterator-&gt;data-&gt;data&lt;&lt;\")\";\r\n				iterator=iterator-&gt;nextNode;\r\n			}\r\n			cout&lt;&lt;endl;\r\n		}\r\n}; \r\n#endpython#','2019-08-23 17:34:27',3,NULL),(27,'数据结构&算法：俄罗斯方块 C++实现','\r\n#fs:15;wt:800#这种是可以直接复制到编译器里直接编译运行的小游戏代码\r\n功能还有些残缺，没有再花时间完善他，只能无限的玩下去直到游戏结束，没有积分、没有方块提示#e#\r\n#fs:12;wt:400#使用的向量计算实现的方块旋转，每种方块只有一个矩阵格式的数据，方向向量实现的矩阵旋转#e#\r\n\r\n#python#\r\n#include&lt;iostream&gt;\r\n#include&lt;ctime&gt;\r\n#include&lt;cstdlib&gt;\r\n#include&lt;windows.h&gt;\r\n#include&lt;conio.h&gt;\r\n#include&lt;math.h&gt;\r\n#define MY 21\r\n#define MX 15\r\n#define INTERVAL 0.5\r\nconst int MN=7;\r\nbool IF=true;\r\nusing namespace std;\r\nint MAP[MY][MX]={0};\r\nclass SQRoffset\r\n{\r\n	public:\r\n		int N;\r\n		double RR[10];\r\n		double RA[10];\r\n		int IX;\r\n		int IY;\r\n}kind[MN];\r\nclass Square\r\n{\r\n	public:\r\n		Square()\r\n		{\r\n			KIND=rand()%MN;\r\n			NEXT=rand()%MN;\r\n			X=MX/2;\r\n			Y=kind[KIND].IY;\r\n			Roff=0;\r\n		}\r\n		void MoveSquare(char x)\r\n		{\r\n			double xx,yy;\r\n			int i,j;\r\n			bool B=true;\r\n			switch(x)\r\n			{\r\n				case \'w\':Roff++;break;\r\n				case \'s\':\r\n					Run();\r\n					break;\r\n				case \'a\':\r\n					for(int i=0;i&lt;kind[KIND].N;i++)\r\n					{\r\n						xx=X-2+kind[KIND].RR[i]*cos((M_PI/2)*(kind[KIND].RA[i]+Roff))+0.5;\r\n						yy=Y+kind[KIND].RR[i]*sin((M_PI/2)*(kind[KIND].RA[i]+Roff))+0.5;\r\n						if(int(xx)&gt;=0&amp;&amp;int(xx)&lt;MX&amp;&amp;int(yy)&gt;=0&amp;&amp;int(yy)&lt;MY&amp;&amp;(MAP[int(yy)][int(xx)]==0||MAP[int(yy)][int(xx)]==2)){}\r\n						else{ B=false;break;}\r\n					}\r\n					if(B==true)X--;\r\n					break;\r\n				case \'d\':\r\n					for(int i=0;i&lt;kind[KIND].N;i++)\r\n					{\r\n						xx=X+1+kind[KIND].RR[i]*cos((M_PI/2)*(kind[KIND].RA[i]+Roff))+0.5;\r\n						yy=Y+kind[KIND].RR[i]*sin((M_PI/2)*(kind[KIND].RA[i]+Roff))+0.5;\r\n						if(int(xx)&gt;=0&amp;&amp;int(xx)&lt;MX&amp;&amp;int(yy)&gt;=0&amp;&amp;int(yy)&lt;MY&amp;&amp;(MAP[int(yy)][int(xx)]==0||MAP[int(yy)][int(xx)]==2)){}\r\n						else{ B=false;break;}\r\n					}\r\n					if(B==true)X++;\r\n					break;\r\n				case \'q\':\r\n					while(Run()==true){}\r\n					break;\r\n			}\r\n			for(i=0;i&lt;MY;i++)\r\n			for(j=0;j&lt;MX;j++)\r\n			{\r\n				if(MAP[i][j]==2)MAP[i][j]=0;\r\n			}\r\n			for(i=0;i&lt;kind[KIND].N;i++)\r\n				{\r\n					xx=X+kind[KIND].RR[i]*cos((M_PI/2)*(kind[KIND].RA[i]+Roff))+0.5;\r\n					yy=Y+kind[KIND].RR[i]*sin((M_PI/2)*(kind[KIND].RA[i]+Roff))+0.5;\r\n					if(yy&gt;=0&amp;&amp;yy&lt;MY&amp;&amp;xx&gt;=0&amp;&amp;xx&lt;MX)\r\n						MAP[int(yy)][int(xx)]=2;\r\n				}\r\n		}\r\n		bool Run()\r\n		{\r\n			int i,j;\r\n			bool LIVE=true;\r\n			double xx,yy;\r\n			Y=Y+1;\r\n			for(i=0;i&lt;MY;i++)\r\n			for(j=0;j&lt;MX;j++)\r\n			{\r\n				if(MAP[i][j]==2)MAP[i][j]=0;\r\n			}\r\n			for(i=0;i&lt;kind[KIND].N;i++)\r\n			{\r\n				xx=X+kind[KIND].RR[i]*cos((M_PI/2)*(kind[KIND].RA[i]+Roff))+0.5;\r\n				yy=Y+kind[KIND].RR[i]*sin((M_PI/2)*(kind[KIND].RA[i]+Roff))+0.5;\r\n				if(MAP[int(yy)][int(xx)]==1||int(yy)&gt;=MY)\r\n				{\r\n					LIVE=false;\r\n					break;\r\n				}\r\n			}\r\n			if(LIVE==false)\r\n			{\r\n			Y--;\r\n			for(i=0;i&lt;kind[KIND].N;i++)\r\n			{\r\n				xx=X+kind[KIND].RR[i]*cos((M_PI/2)*(kind[KIND].RA[i]+Roff))+0.5;\r\n				yy=Y+kind[KIND].RR[i]*sin((M_PI/2)*(kind[KIND].RA[i]+Roff))+0.5;\r\n				if(yy&gt;=0&amp;&amp;yy&lt;MY&amp;&amp;xx&gt;=0&amp;&amp;xx&lt;MX)\r\n						MAP[int(yy)][int(xx)]=1;\r\n			}\r\n			for(int k=1;k&lt;=4;k++) \r\n			for(i=MY-1;i&gt;=0;i--)\r\n			{\r\n				bool B=true;\r\n				for(j=0;j&lt;MX;j++)\r\n				if(MAP[i][j]==0)\r\n				{\r\n					B=false;\r\n					break;\r\n				}\r\n				if(B==true)\r\n				{\r\n					for(j=0;j&lt;MX;j++)\r\n						MAP[i][j]=0;\r\n					for(;i&gt;0;i--)\r\n					for(j=0;j&lt;MX;j++)\r\n					{\r\n						MAP[i][j]=MAP[i-1][j];\r\n						MAP[i-1][j]=0;\r\n					}\r\n					break;\r\n				}\r\n			}\r\n			RandSquare();\r\n			}\r\n			else \r\n			{\r\n				for(i=0;i&lt;kind[KIND].N;i++)\r\n				{\r\n					xx=X+kind[KIND].RR[i]*cos((M_PI/2)*(kind[KIND].RA[i]+Roff))+0.5;\r\n					yy=Y+kind[KIND].RR[i]*sin((M_PI/2)*(kind[KIND].RA[i]+Roff))+0.5;\r\n					if(yy&gt;=0&amp;&amp;yy&lt;MY&amp;&amp;xx&gt;=0&amp;&amp;xx&lt;MX)\r\n						MAP[int(yy)][int(xx)]=2;\r\n				}\r\n			}\r\n			return LIVE;\r\n		}\r\n		void RandSquare()\r\n		{\r\n			X=kind[NEXT].IX;\r\n			Y=kind[NEXT].IY;\r\n			KIND=NEXT;\r\n			NEXT=rand()%MN; \r\n			Roff=0;\r\n		}\r\n	private:\r\n	int X;\r\n	int Y;\r\n	int KIND;\r\n	int NEXT;\r\n	int Roff;\r\n}SQ;\r\n\r\nvoid DisplayMap();\r\nvoid InitSQR(SQRoffset*t);\r\n\r\nint main()\r\n{\r\n	srand(time(0));\r\n	char a;\r\n	InitSQR(kind);\r\n	double TIME=0;\r\n	while(IF==true)\r\n	{\r\n		TIME+=0.01;\r\n		if(kbhit())\r\n		{\r\n			a=getch();\r\n			SQ.MoveSquare(a);\r\n			DisplayMap();\r\n	    }\r\n	    if(TIME&gt;=INTERVAL)\r\n	    {\r\n	    	TIME=0;\r\n	    SQ.Run();\r\n		DisplayMap();\r\n	    }\r\n	    Sleep(10);\r\n	}\r\n	while(1)\r\n	{\r\n	cout&lt;&lt;char(-55)&lt;&lt;char(-75)&lt;&lt;char(-79)&lt;&lt;char(-58)&lt;&lt;char(-93)&lt;&lt;char(-84)&lt;&lt;char(-53)&lt;&lt;char(-64)&lt;&lt;char(-63)&lt;&lt;char(-53)&lt;&lt;char(-80)&lt;&lt;char(-55)&lt;&lt;char(-93)&lt;&lt;char(-95)&lt;&lt;char(-71)&lt;&lt;char(-2)&lt;&lt;char(-71)&lt;&lt;char(-2)&lt;&lt;char(-71)&lt;&lt;char(-2)&lt;&lt;char(-93)&lt;&lt;char(-95)&lt;&lt;char(-93)&lt;&lt;char(-95)&lt;&lt;char(-93)&lt;&lt;char(-95)&lt;&lt;endl;\r\n    }\r\n	return 0;\r\n}\r\nvoid InitSQR(SQRoffset*t)\r\n{\r\n	int i=0;\r\n	t[i].N=4;\r\n	t[i].RR[0]=1;\r\n	t[i].RA[0]=0;\r\n	t[i].RR[1]=1;\r\n	t[i].RA[1]=1;\r\n	t[i].RR[2]=1;\r\n	t[i].RA[2]=2;\r\n	t[i].RR[3]=0;\r\n	t[i].RA[3]=0;\r\n	t[i].IX=MX/2;\r\n	t[i++].IY=-1;\r\n	t[i].N=4;\r\n	t[i].RR[0]=1;\r\n	t[i].RA[0]=3;\r\n	t[i].RR[1]=0;\r\n	t[i].RA[1]=0;\r\n	t[i].RR[2]=1;\r\n	t[i].RA[2]=1;\r\n	t[i].RR[3]=2;\r\n	t[i].RA[3]=1;\r\n	t[i].IX=MX/2;\r\n	t[i++].IY=-2;\r\n	t[i].N=4;\r\n	t[i].RR[0]=1;\r\n	t[i].RA[0]=0;\r\n	t[i].RR[1]=1;\r\n	t[i].RA[1]=1;\r\n	t[i].RR[2]=2;\r\n	t[i].RA[2]=1;\r\n	t[i].RR[3]=0;\r\n	t[i].RA[3]=0;\r\n	t[i].IX=MX/2;\r\n	t[i++].IY=-2;\r\n	t[i].N=4;\r\n	t[i].RR[0]=1;\r\n	t[i].RA[0]=2;\r\n	t[i].RR[1]=1;\r\n	t[i].RA[1]=1;\r\n	t[i].RR[2]=2;\r\n	t[i].RA[2]=1;\r\n	t[i].RR[3]=0;\r\n	t[i].RA[3]=0;\r\n	t[i].IX=MX/2;\r\n	t[i++].IY=-2;\r\n	t[i].N=4;\r\n	t[i].RR[0]=2;\r\n	t[i].RA[0]=-0.5;\r\n	t[i].RR[1]=1;\r\n	t[i].RA[1]=0;\r\n	t[i].RR[2]=1;\r\n	t[i].RA[2]=1;\r\n	t[i].RR[3]=0;\r\n	t[i].RA[3]=0;\r\n	t[i].IX=MX/2;\r\n	t[i++].IY=-2;\r\n	t[i].N=4;\r\n	t[i].RR[0]=2;\r\n	t[i].RA[0]=-1.5;\r\n	t[i].RR[1]=1;\r\n	t[i].RA[1]=2;\r\n	t[i].RR[2]=1;\r\n	t[i].RA[2]=1;\r\n	t[i].RR[3]=0;\r\n	t[i].RA[3]=0;\r\n	t[i].IX=MX/2;\r\n	t[i++].IY=-2;\r\n	t[i].N=4;\r\n	t[i].RR[0]=0;\r\n	t[i].RA[0]=0;\r\n	t[i].RR[1]=1;\r\n	t[i].RA[1]=1;\r\n	t[i].RR[2]=2;\r\n	t[i].RA[2]=1.5;\r\n	t[i].RR[3]=1;\r\n	t[i].RA[3]=2;\r\n	t[i].IX=MX/2;\r\n	t[i++].IY=-2;\r\n}\r\nvoid DisplayMap()\r\n{\r\n	system(\"cls\");\r\n	int x,y;\r\n	cout&lt;&lt;\"          俄罗斯方块-残次版\"&lt;&lt;endl;\r\n	for(y=-1;y&lt;=MY;y++)\r\n	{\r\n		for(x=-1;x&lt;=MX;x++)\r\n		{\r\n			if(y==-1||y==MY)\r\n				cout&lt;&lt;\"■\";\r\n			else\r\n				{\r\n					if(y==0&amp;&amp;MAP[y][x]==1)IF=false; \r\n					else\r\n					{\r\n					if(x==-1||x==MX)\r\n						cout&lt;&lt;\"■\";\r\n					else if(MAP[y][x]==0)cout&lt;&lt;\"  \";\r\n					else cout&lt;&lt;\"■\";\r\n				   }\r\n				}\r\n		}\r\n		cout&lt;&lt;endl;\r\n	}							                \r\n	cout&lt;&lt;\"     wasd控制，按q方块直接到底\\n\"&lt;&lt;endl;\r\n}\r\n#endpython#','2019-08-25 00:05:02',3,NULL),(28,'数据结构&算法：深度优先搜索算法演示','\r\n#fs:15;wt:800#复制代码编译运行后的效果是一个动态演示深度优先搜索算法的过程。#e#\r\n根据注释可以自行修改进行搜索的的地图\r\n\r\n#python#\r\n#include&lt;iostream&gt;\r\n#include&lt;stdlib.h&gt;\r\n#include&lt;conio.h&gt;\r\n#include&lt;windows.h&gt;\r\nusing namespace std;\r\n#define N 20\r\n/*\r\n矩阵内0为空位,1为起点 2为终点 3为墙壁 4为水平线 5为垂直线  6为左下角 7为右下角 8位左上角 9为右上角 10临时使用 \r\n*/\r\nint count=0;\r\nint MAP[N][N]={\r\n	{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},\r\n	{3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3},\r\n	{3,0,0,3,3,3,3,0,3,3,3,3,0,3,3,3,3,0,0,3},\r\n	{3,0,0,3,0,0,0,0,3,0,0,3,0,3,0,0,0,0,0,3},\r\n	{3,0,0,3,0,0,0,0,3,0,0,3,0,3,0,0,0,0,0,3},\r\n	{3,0,0,3,0,0,0,0,3,0,0,3,0,3,0,0,0,0,0,3},\r\n	{3,0,0,3,3,3,3,0,3,0,0,3,0,3,3,3,3,0,0,3},\r\n	{3,0,0,0,0,0,3,0,3,0,0,3,0,0,0,0,3,0,0,3},\r\n	{3,0,0,0,0,0,3,0,3,0,0,3,0,0,0,0,3,0,0,3},\r\n	{3,0,0,0,0,0,3,0,3,0,0,3,0,0,0,0,3,0,0,3},\r\n	{3,0,0,3,3,3,3,0,3,3,3,3,0,3,3,3,3,0,0,3},\r\n	{3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3},\r\n	{3,0,3,3,3,3,0,3,0,0,3,0,0,3,3,3,3,3,0,3},\r\n	{3,0,3,0,0,0,0,3,0,0,3,0,0,3,0,0,0,3,0,3},\r\n	{3,0,3,0,0,0,0,3,0,0,3,0,0,3,0,0,0,3,0,3},\r\n	{3,0,3,3,3,3,0,3,0,0,3,0,0,3,0,0,0,3,0,3},\r\n	{3,0,3,0,0,0,0,3,0,0,3,0,0,3,0,0,0,3,0,3},\r\n	{3,0,3,0,0,0,0,3,3,3,3,0,0,3,0,0,0,3,0,3},\r\n	{3,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,3},\r\n	{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},\r\n};\r\nvoid DisplayMap(){\r\n	int i,j;\r\n	system(\"cls\");\r\n	for(i=0;i&lt;N;i++){\r\n		for(j=0;j&lt;N;j++)\r\n			switch(MAP[i][j]){\r\n				case 0:cout&lt;&lt;\"□\";break;\r\n				case 1:cout&lt;&lt;\"起\";break;\r\n				case 2:cout&lt;&lt;\"终\";break;\r\n				case 3:cout&lt;&lt;\"■\";break;\r\n				case 4:cout&lt;&lt;\"─\";break;\r\n				case 5:cout&lt;&lt;\"│\";break;\r\n				case 6:cout&lt;&lt;\"└\";break;\r\n				case 7:cout&lt;&lt;\"┘\";break;\r\n				case 8:cout&lt;&lt;\"┌\";break;\r\n				case 9:cout&lt;&lt;\"┐\";break;\r\n				case 10:cout&lt;&lt;\"○\";break;\r\n				default:exit(0); \r\n			}\r\n		cout&lt;&lt;endl;\r\n	}\r\n}\r\nclass DeepSearch{\r\n	private:\r\n		int start_X;\r\n		int start_Y;\r\n		int end_X;\r\n		int end_Y;\r\n	public:\r\n		void SetStart(int x,int y){\r\n			start_X=x;\r\n			start_Y=y;\r\n			MAP[y][x]=1;\r\n		}\r\n		void SetEnd(int x,int y){\r\n			end_X=x;\r\n			end_Y=y;\r\n			MAP[y][x]=2;\r\n		}\r\n		void dg(int x,int y){\r\n			int X,Y;\r\n			DisplayMap();\r\n			//getch();\r\n			Sleep(100);\r\n			if(MAP[y][x]==2){\r\n				//DisplayMap();\r\n				count++;\r\n			}\r\n			else\r\n			{\r\n				MAP[y][x]=10;\r\n				X=x+1;Y=y;//往右走\r\n				if(X&lt;N&amp;&amp;MAP[Y][X]&lt;=2){\r\n					\r\n					dg(X,Y);\r\n				} \r\n				X=x;Y=y-1;//往上走 \r\n				if(Y&gt;=0&amp;&amp;MAP[Y][X]&lt;=2){\r\n					dg(X,Y);\r\n				}\r\n				X=x-1;Y=Y;//往左走\r\n				if(X&gt;=0&amp;&amp;MAP[Y][X]&lt;=2){\r\n					dg(X,Y);\r\n				}\r\n				X=x;Y=y+1;//往下走\r\n				if(Y&lt;N&amp;&amp;MAP[Y][X]&lt;=2){\r\n					dg(X,Y);\r\n				}\r\n			}\r\n			if(MAP[y][x]==10)\r\n			{\r\n			\r\n				MAP[y][x]=0;\r\n				DisplayMap();\r\n				//getch();\r\n				Sleep(100);\r\n			}\r\n		}\r\n		void Running(){\r\n			dg(start_X,start_Y);\r\n		}\r\n};\r\nint main(){\r\n	int i,j;\r\n	DeepSearch F;\r\n	F.SetStart(1,1);\r\n	F.SetEnd(18,18);\r\n	F.Running(); \r\n	//DisplayMap();\r\n	cout&lt;&lt;\"可行解的个数：\"&lt;&lt;count&lt;&lt;endl;\r\n	return 0;\r\n} \r\n#endpython#','2019-08-25 00:17:57',3,'2019-08-25 00:22:40'),(29,'python简单爬虫：伊藤润二漫画','\r\n#wt:800#一个漫画网站的爬虫，目标是将所有伊藤润二的漫画分类进行爬取并存储#e#\r\n漫画网站站点：#wt:800;co(255,0,0)#https://heibaimanhua.com/#e#\r\n\r\n不过现在这个网站好像已经改过了，现在要爬取这个网站的话，爬取逻辑已经和当初我爬的时候的不一样了。所以以下代码如果还想再次使用，还要进行修改。但是爬取到的漫画会上传到博客的漫画区。\r\n#python#\r\nimport requests\r\nimport struct\r\nfrom bs4 import BeautifulSoup\r\nfrom io import BytesIO\r\nfrom PIL import Image,ImageFile\r\nimport os,time\r\nimport ssl\r\ndef downloadImg(src,count):\r\n	try:\r\n		img=requests.get(src,headers=header)\r\n	except requests.exceptions.ConnectionError:\r\n		print(\'某种错误\')\r\n	else:\r\n		try:\r\n			image=Image.open(BytesIO(img.content))\r\n		except OSError:\r\n			print(\'此图片请求失败\')\r\n		else:\r\n			image.save(dirurl+\'\\\\\'+str(count)+\'.png\')\r\ndef main():\r\n	ImageFile.LOAD_TRUNCATED_IMAGES = True\r\n	website=\'https://heibaimanhua.com/\'\r\n	index=1\r\n	for i in range(1,1):\r\n		if i!=1:\r\n			mainpage=requests.get(website+\'page/\'+str(i))\r\n		else:\r\n			mainpage=requests.get(website)\r\n			soup=BeautifulSoup(mainpage.text,\'lxml\')\r\n			childlist=soup.find(\'div\',{\'class\':\'wraper\'}).find(\'div\',{\'class\':\'colbox\'}).find(\'div\',{\'class\':\'clearfix info-showbox\'})\r\n			print(childlist)\r\n			for x in childlist:\r\n				print(x[\'src\'])\r\n	pageindex=1\r\n	for j in childlist:\r\n		if pageindex&gt;=0:\r\n			try:\r\n				x=j.find(\'div\',{\'class\':\'wraper\'}).find(\'div\',{\'div\':\'colbox\'}).find_all(\'img\')\r\n				print(x)\r\n			except AttributeError:\r\n				print(\'无图片\')\r\n			else:\r\n				name=x.text.replace(\'伊藤润二\',\'\').replace(\'日本恐怖漫画\',\'\').replace(\'系列\',\'\').replace(\':\',\'\').replace(\'*\',\'\').replace(\'/\',\'\').replace(\'\\\\\',\'\').replace(\'&lt;\',\'\').replace(\'&gt;\',\'\')\r\n				url=x[\'href\']\r\n				print(name)\r\n				print(url)\r\n				dirurl=\'E:\\\\学习\\\\work\\\\python练习\\\\爬虫练习\\\\伊藤润二\\\\\'+name\r\n				os.makedirs(dirurl)\r\n				html = requests.get(url) #像目标url地址发送get请求，返回一个response对象\r\n				header = {\r\n						\'Accept-Encoding\':\'gzip, deflate\',\r\n						\'Accept-Language\':\'zh-CN,zh;q=0.9\',\r\n						\'Cache-Control\':\'no-cache\',\r\n						\'Connection\':\'keep-alive\',\r\n						\'Cookie\':\'RK=EFui65qbSS; pgv_pvi=5845083136; pgv_si=s5381338112; _qpsvr_localtk=0.37584591731088746; douyu_loginKey=af0da29cd9eea2515875a7fd2a0f2302; tvfe_boss_uuid=09a959af9cad1c46; o_cookie=547250643; pac_uid=1_547250643; qqmusic_uin=; qqmusic_key=; pgv_info=ssid=s6955535628&amp;pgvReferrer=; pgv_pvid=5667468567; ptcz=1319d68fe40fd974264d800cf4a3d8f03b81efa181e1326c6345336ff61471d9; pt2gguin=o0547250643; FTN5K=3fa44fd6; mobileUV=1_163a0832666_c6627; verifysession=h01940c15c27945a0920c2b99aaf6149e5bb254ab74a37a6526beed5012dcded502a347958bc95bcdb6; ptisp=ctc; eas_sid=31e5x3y7j0k619U8e1A9I8d0c4; IED_LOG_INFO2=userUin%3D547250643%26nickName%3D-%2525E5%252586%2525B7%2525E6%2525BC%2525A0%2525E6%25258E%2525A7%26userLoginTime%3D1537069823; qqmusic_fromtag=; midas_openid=547250643; midas_openkey=@oBoe2H6g7; uin=o0547250643; rv2=80C6EB4993D95BB5F75E202905F65CF82670A730DF466DD3D0; property20=7407F41007E84C187B87AA1B859B5788214A5C034EC1BCB816727B6217A6CA48411A69366B9D84E3; skey=@aeHKKc4FY\',\r\n						\'Host\':\'read.html5.qq.com\',\r\n						\'Pragma\':\'no-cache\',\r\n						\'Referer\':\'http://heibaimanhua.com/weimanhua/kbmh/131039.html\',\r\n						\'User-Agent\':\'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36\'\r\n				        }\r\n				soup=BeautifulSoup(html.text,\'lxml\')\r\n				try:\r\n					imglist=soup.body.find(\'div\',{\'id\':\'kbmhimg\'}).find_all(\'div\',{\'class\':\'post-image\'})\r\n				except AttributeError:\r\n					imglist=soup.body.find(\'div\',{\'class\':\'post-images-item\'}).find_all(\'div\',{\'class\':\'post-image\'})\r\n				count=1\r\n				for t in imglist:\r\n					y=t.find(\'img\')\r\n					print(name+\'[\'+str(count)+\']:\'+y[\'src\'])\r\n					if y[\'src\'][0:7]==\'http://\':\r\n						downloadImg(y[\'src\'],count)\r\n						count+=1\r\n					else:\r\n						pageindex=pageindex+1\r\nif __name__ == \'__main__\':\r\n	main()\r\n#endpython#','2019-08-25 00:37:32',3,'2019-09-05 11:26:01'),(30,'千万别用windows自带的记事本','被坑了个爽。。。。\r\n在windows下把漫画名存在记事本里。看着还挺好的。\r\n上传到github之后才发现\r\n中文都是乱码\r\n漫画读取漫画名的时候读取崩溃、现在漫画板块打不开。。。\r\n要看漫画要手动输入139.196.163.240/readcomic/序号  ，序号范围为 1-51','2019-08-28 13:02:04',3,'2019-08-28 13:13:07'),(34,'git学习经验总结','#fs:20#0、首次使用git的详细过程#e#\r\n链接：https://www.cnblogs.com/sdcs/p/8270029.html\r\n\r\n#fs:20#1、创建本地git仓库#e#\r\n#python#git init#endpython#在当前文件夹下会自动创建一个.git文件，里面记录了当前git仓库的一些信息和数据\r\n\r\n#fs:20#2、设置用户名和邮箱#e#\r\n#python#\r\n$ git config --global user.name \"用户名\"\r\n$ git config --global user.email 邮箱\r\n#endpython#在这里使用了#wt:800;co(155,0,0)#git config #e#指令，可以用来给git设置配置，在git config指令后使用了 --global参数则表明此次设置为全局设置，之后每次使用git的时候都将读取此次的设置。\r\n使用#wt:800;co(155,0,0)#git config --list#e#指令可以查看当前的所有配置。\r\n使用#wt:800;co(155,0,0)#git config [key]#e#可以查看某一个指定的配置，比如 git config user.name\r\n\r\n#fs:20#3、克隆远程仓库#e#\r\n#python#git clone [url] dirname#endpython#[url]为远程仓库的路径，dirname为当克隆下来的时候自定义的文件夹名称，如果不写则默认为远程仓库中的名称。\r\n\r\n#fs:20#4、管理本地仓库#e#\r\n使用 git add指令添加跟踪文件或文件夹\r\n在跟踪了某一个文件后又再次修改过文件的内容，需要再次使用#wt:800;co(155,0,0)#git add#e#指令把被修改的文件从非暂存区移动到暂存区\r\n在提交前使用git status指令查看当前git的情况：\r\n#python#$ git status\r\nOn branch master\r\n\r\nNo commits yet\r\n\r\nChanges to be committed:\r\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\r\n\r\n        new file:   XXXXX\r\n\r\nChanges not staged for commit:\r\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\r\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\r\n\r\n        modified:   XXX\r\n\r\nUntracked files:\r\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\r\n\r\n        .gitignore\r\n#endpython#以上的情况就是在add添加了一个跟踪目标后，再次修改了目标文件，此时在changes not staged for commit这一项的下面会提示此文件已被修改过，使用#wt:800;co(155,0,0)#git add #e#指令可以把此次的修改提交到暂存区，使用#wt:800;co(155,0,0)#git checkout -- #e#指令可以将此次修改进行删除，文件将会回退到上一次执行git add指令时候的状态。\r\n#fs:20#5、.gitignore文件的使用#e#\r\n有的时候不想让一些指定的文件或者某一类型的文件被跟踪、提交，比如在这个博客里有一些漫画，漫画的总的文件容量比较大，且对代码进行修改并不会影响到图片文件，所以将漫画文件给忽略掉，这样之后提交代码到远程仓库或者从远程仓库clone项目的时候不需要浪费时间上传或者下载漫画文件。\r\n首次创建.gitignore文件可以使用#wt:800;co(155,0,0)#touch .gitignore#e#指令进行创建\r\n#python#\r\nGit 忽略规则优先级\r\n在 .gitingore 文件中，每一行指定一个忽略规则，Git 检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：\r\n\r\n从命令行中读取可用的忽略规则\r\n当前目录定义的规则\r\n父级目录定义的规则，依次递推\r\n$GIT_DIR/info/exclude 文件中定义的规则\r\ncore.excludesfile中定义的全局规则\r\nGit 忽略规则匹配语法\r\n在 .gitignore 文件中，每一行的忽略规则的语法如下：\r\n\r\n空格不匹配任意文件，可作为分隔符，可用反斜杠转义\r\n# 开头的文件标识注释，可以使用反斜杠进行转义\r\n! 开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。可以使用反斜杠进行转义\r\n/ 结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件\r\n/ 开始的模式匹配项目跟目录\r\n如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录\r\n** 匹配多级目录，可在开始，中间，结束\r\n? 通用匹配单个字符\r\n[] 通用匹配单个字符列表\r\n常用匹配示例：\r\nbin/: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件\r\n/bin: 忽略根目录下的bin文件\r\n/*.c: 忽略 cat.c，不忽略 build/cat.c\r\ndebug/*.obj: 忽略 debug/io.obj，不忽略 debug/common/io.obj 和 tools/debug/io.obj\r\n**/foo: 忽略/foo, a/foo, a/b/foo等\r\na/**/b: 忽略a/b, a/x/b, a/x/y/b等\r\n!/bin/run.sh: 不忽略 bin 目录下的 run.sh 文件\r\n*.log: 忽略所有 .log 文件\r\nconfig.php: 忽略当前路径的 config.php 文件\r\n.gitignore规则不生效\r\n.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。\r\n\r\n解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:\r\n\r\ngit rm -r --cached .\r\n\r\n#endpython#\r\n#fs:20#6、提交仓库#e#\r\n在打算提交前，使用过git status看看所有更新文件是否都已进入暂存区，如果没有问题后，执行以下命令进行提交\r\n#python#git commit#endpython#这种方式会启动文本编辑器以便输入本次提交的说明。 （默认会启用 shell 的环境变量 $EDITOR 所指定的软件，一般都是 vim 或 emacs。，使用 git config --global core.editor 命令设定你喜欢的编辑软件。）\r\n也可以添加 -m参数，在命令中直接指定提交说明。例如：\r\n#python#git commit -m \"说明内容\"#endpython#\r\n每次修改过被跟踪的文件，都需要使用git add指令将修改过的文件加入暂存区，在一些时候这样显得比较繁琐，可以在提交的时候加入 -a参数，在提交的时候会自动将所有跟踪了的文件全部提交而不需要将修改过的文件一个一个add了。\r\n#python#git commit -a -m \"提交说明\"#endpython#\r\n#fs:20#7、连接自己的github账号#e#\r\n在新的电脑上需要进行ssh的设置。具体参考链接：\r\n#python#https://www.jianshu.com/p/8293660e812c#endpython#\r\n\r\n\r\n\r\n','2019-09-08 11:04:19',3,'2019-12-24 12:33:50'),(35,'python3 新式类属性学习总结','__slots__:这个属性加入到类中的时候，将其值设为一个包含所有属性名称的元组，在之后都无法添加删除这个类中的属性。在某些实例量较大的情况下可以节省很多空间。\r\n例子：\r\n#python#\r\n&gt;&gt;class A:\r\n&gt;&gt;	def __init__(self):\r\n&gt;&gt;		self.x=1\r\n&gt;&gt;		self.y=2\r\n&gt;&gt;	__slots__=(\'x\',\'y\')\r\n\r\n&gt;&gt;a=A()\r\n&gt;&gt;a.z=1\r\nAttributeError: \'A\' object has no attribute \'z\'\r\n#endpython#\r\n__getitem__:实现这个方法后类可以使用下标的形式调用。\r\n例子：\r\n#python#\r\n&gt;&gt;class A:\r\n&gt;&gt;	def __getitem__(self,index):\r\n&gt;&gt;		return index\r\n&gt;&gt;a=A()\r\n&gt;&gt;print(a[1])\r\n1\r\n#endpython#\r\n__mro__:类型是一个元组，保存着解析顺序信息。只能通过类来使用，不能通过实例调用。在多继承的时候会根据括号里继承的类的顺序，使用先左后右的广度优先的方式进行解析。\r\n例子：\r\n#python#\r\n&gt;&gt;class A:\r\n&gt;&gt;	def __init__(self):\r\n&gt;&gt;		self.x=1\r\n\r\n&gt;&gt;class B(A):\r\n&gt;&gt;		pass\r\n\r\n&gt;&gt;class C(A):\r\n&gt;&gt;		self.x=3\r\n	\r\n&gt;&gt;class D(B,C):\r\n&gt;&gt;	pass\r\n\r\n&gt;&gt;t=D()\r\n&gt;&gt;print(t.x)\r\n3\r\n\r\n&gt;&gt;print(D.mro())\r\n[&lt;class \'__main__.D\'&gt;, &lt;class \'__main__.B\'&gt;, &lt;class \'__main__.C\'&gt;, &lt;class \'__main__.A\'&gt;, &lt;class \'object\'&gt;]\r\n#endpython#\r\n\r\n__init__ 和__new__:__init__接收一个实例self作为参数，作用基本可归结为初始化这个实例，__new__接收一个类cls作为参数，返回一个实例，是真正创建出实例的地方，正常通过类名创建实例的时候，先调用__new__创建出一个实例，然后__init__接收到这个实例，并进行初始化，这样才算完整的创建了一个实例。通过重写__new__方法可以实现一些其他效果。\r\n比如：通过重写__new__方法实现单例模式：\r\n#python#\r\n&gt;&gt;class single1:\r\n&gt;&gt;	_attr={}\r\n&gt;&gt;	def __new__(cls):\r\n&gt;&gt;		if not cls in cls._attr:\r\n&gt;&gt;			cls._attr[cls]=super(single1,cls).__new__(cls)\r\n&gt;&gt;		return cls._attr[cls]\r\n&gt;&gt;	def __init__(self):\r\n&gt;&gt;		self.A=1\r\n&gt;&gt;		self.B=2\r\n&gt;&gt;t=single1()\r\n&gt;&gt;print(id(t))\r\n&gt;&gt;tt=single1()\r\n&gt;&gt;print(id(tt))\r\n\r\n2168053162952\r\n2168053162952\r\n#endpython#','2019-09-10 10:24:33',3,'2019-09-11 14:23:28'),(36,'python实现单例模式的几种方法','1、重写__new__方法：\r\n\r\n#python#\r\nclass single1:\r\n	_instance={}\r\n	def __new__(cls):\r\n		if not cls in cls._attr:\r\n			cls._attr[cls]=super(single1,cls).__new__(cls)\r\n		return cls._attr[cls]\r\n	def __init__(self):\r\n		self.A=1\r\n		self.B=2\r\n#endpython#\r\n2、共享属性，创建实例的时候让他们的__dict__都指向同一个字典。\r\n\r\n#python#\r\nclass Borg(object):\r\n&nbsp;&nbsp;&nbsp;&nbsp;_state = {}\r\n&nbsp;&nbsp;&nbsp;&nbsp;def __new__(cls, *args, **kw):\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ob = super(Borg, cls).__new__(cls, *args, **kw)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ob.__dict__ = cls._state\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ob\r\nclass MyClass2(Borg):\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;a = 1\r\n\r\n#endpython#\r\n3、装饰器\r\n#python#\r\ndef singleton(cls, *args, **kw):\r\n&nbsp;&nbsp;&nbsp;&nbsp;instances = {}\r\n&nbsp;&nbsp;&nbsp;&nbsp;def getinstance():\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if cls not in instances:\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instances[cls] = cls(*args, **kw)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return instances[cls]\r\n&nbsp;&nbsp;&nbsp;&nbsp;return getinstance\r\n\r\n@singleton\r\nclass MyClass:\r\n#endpython#\r\n4、import的形式实现\r\n#python#\r\n# single.py 单例模块\r\nclass My_Singleton(object):\r\n&nbsp;&nbsp;&nbsp;&nbsp;def foo(self):\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pass\r\nmy_singleton = My_Singleton()\r\n\r\n&nbsp;\r\n\r\n# 使用\r\n\r\nfrom single import my_singleton\r\nmy_singleton.foo()\r\n\r\n#endpython#','2019-09-10 12:51:35',3,NULL),(37,'闭包总结','闭包就是外函数内嵌一个内函数，外函数的返回值是内函数的引用，外函数在调用后可获得一个内函数的引用，每次调用内函数，是开启一个函数执行过后消亡，但是闭包变量实际上只有一份，每次开启内函数都在使用同一份闭包变量。外函数内的变量叫闭包变量，内函数可以获取到外函数中的闭包变量，正常来说，外函数在调用后内部的变量将会被释放，但是在闭包函数中有所不同，外函数在释放内存前会把变量绑定给内函数，所以在外函数调用后，内函数的引用仍然可以使用这些变量。想要在内函数中修改闭包变量的值有两种方法，一是使用nonlocal关键字，二是把闭包变量修改成可变数据类型。\r\n例如：\r\n#python#\r\ndef outer( a ):\r\n	b = 10  # a和b都是闭包变量\r\n	c = [a] #这里对应修改闭包变量的方法2\r\n	# inner是内函数\r\n	def inner():\r\n		#内函数中想修改闭包变量\r\n		# 方法1 nonlocal关键字声明\r\n		nonlocal  b\r\n		b+=1\r\n		# 方法二，把闭包变量修改成可变数据类型 比如列表\r\n		c[0] += 1\r\n		print(c[0])\r\n		print(b)\r\n		# 外函数的返回值是内函数的引用\r\n	return inner\r\ndemo=outer(5)\r\ndemo()\r\ndemo()\r\n\r\n6\r\n11\r\n7\r\n12\r\n#endpython#\r\n在以上代码中，demo中存的就是内函数的引用，闭包变量只有一份，所以在两次调用内函数引用累加闭包变量的值的过程中，闭包变量的值是一直在累加的。','2019-09-11 14:18:29',3,NULL),(38,'函数式编程总结与练习','函数式编程是指一个函数，接收其他的函数作为参数，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。\r\n有一些python内置的可供函数式编程的函数：\r\nmap\r\nreduce\r\nfilter\r\n也可以自己写一些函数以供函数式编程。\r\n#fs:20;wt:800#例1：#e#\r\n#python#\r\n#将列表中的单个数字进行合并成为一个完整的大数字\r\n#如以下代码，将列表[1,3,5,7,9]转化成整数13579\r\ndef reduce(fun,l):\r\n	x=0\r\n	for i in l:\r\n		x=fun(x,i)\r\n	return x\r\ndef fn(x,y):\r\n	return x*10+y\r\na=reduce(fn,[1,3,5,7,9])\r\nprint(a)\r\n#endpython#\r\n#fs:20;wt:800#例2：#e#\r\n#python#\r\n#将一个由英文单词组成的列表中的单词转化成首字母大写，其他字母小写的形式。\r\n#如以下代码，将列表[\'abc\',\'aBc\',\'ABC\',\'abC\']转化成[\'Abc\', \'Abc\', \'Abc\', \'Abc\']\r\ndef fn1(n):\r\n	x=\'\'\r\n	for i in range(len(n)):\r\n		print(i,n[i])\r\n		if i==0:\r\n			if ord(n[i])&lt;=ord(\'z\') and ord(n[i])&gt;=ord(\'a\'):\r\n				x+=chr(ord(n[i])-32)\r\n			else:\r\n				x+=n[i]\r\n		else:\r\n			if ord(n[i])&lt;=ord(\'Z\') and ord(n[i])&gt;=ord(\'A\'):\r\n				x+=chr(ord(n[i])+32)\r\n			else:\r\n				x+=n[i]\r\n	return x\r\ndef formating(fun,l):\r\n	# print(l)\r\n	x=[]\r\n	for i in l:\r\n		x.append(fun(i))\r\n	return x\r\nnamelist=[\'abc\',\'aBc\',\'ABC\',\'abC\']\r\nL2=formating(fn1,namelist)\r\nprint(L2)\r\n#endpython#\r\n<br>','2019-09-11 15:06:21',3,NULL),(47,'windos mysql8 忘记root密码的解决办法','1.打开命令窗口cmd，输入命令：net stop mysql，停止MySQL服务，\r\n\r\n2.开启跳过密码验证登录的MySQL服务\r\n        输入命令  \r\n        mysqld --console --skip-grant-tables --shared-memory \r\n\r\n3.再打开一个新的cmd，无密码登录MySQL，输入登录命令：mysql -u root -p\r\n\r\n4. 密码置为空，命令如下：\r\n    use mysql\r\n    update user set authentication_string=\'\' where user=\'root\';\r\n\r\n5.退出mysql，执行命令：\r\n    quit\r\n\r\n6. 关闭以-console --skip-grant-tables --shared-memory 启动的MySQL服务，\r\n\r\n7. 打开命令框，输入：net start mysql  启动MySQL服务。\r\n\r\n8.步骤4密码已经置空，所以无密码状态登录MySQL，输入登录命令：mysql -u root -p\r\n\r\n9.成功修改密码，如下图：\r\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'新密码\';\r\n\r\n\r\n10.验证更改后密码正确登录\r\n输入quit，退出当前登录，输入登录命令：mysql -u root -p\r\n输入密码，成功登录，到此，重置密码结束。','2019-11-21 09:28:24',3,NULL),(48,'pip 更换下载源的方法&国内的一些可用源','#fs:25;wt:800#国内的一些镜像#e#\r\n#python#\r\n  阿里云&nbsp;http://mirrors.aliyun.com/pypi/simple/&nbsp;\r\n  中国科技大学&nbsp;https://pypi.mirrors.ustc.edu.cn/simple/&nbsp;\r\n  豆瓣(douban)&nbsp;http://pypi.douban.com/simple/&nbsp;\r\n  清华大学&nbsp;https://pypi.tuna.tsinghua.edu.cn/simple/&nbsp;\r\n  中国科学技术大学&nbsp;http://pypi.mirrors.ustc.edu.cn/simple/\r\n#endpython#\r\n#fs:20;wt:800#临时修改：&nbsp;#e#\r\n可以在使用pip的时候在后面加上-i参数，指定pip源&nbsp;\r\n例如：pip install scrapy -i&nbsp;https://pypi.tuna.tsinghua.edu.cn/simple\r\n\r\n#fs:20;wt:800#永久修改： #e# \r\nlinux: \r\n修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：\r\n\r\n[global]\r\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\r\n\r\nwindows: \r\n直接在user目录中创建一个pip目录，如：C:\\Users\\xx\\pip，在pip 目录下新建文件pip.ini，内容如下\r\n\r\n或者按照网友的建议：win+R 打开用户目录%HOMEPATH%，在此目录下创建 pip 文件夹，在 pip 目录下创建 pip.ini 文件, 内容如下\r\n#python#[global]\r\n\r\ntimeout = 6000\r\n\r\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\r\n\r\ntrusted-host = pypi.tuna.tsinghua.edu.cn#endpython#<br>','2019-11-26 18:05:45',3,'2019-12-24 16:39:20'),(49,'pyqt5制作二维带有物理效果的游戏','结尾附有代码链接\r\n当前解决的一些问题：\r\n#fs:15;wt:800#1、小球碰撞时的动量能量、速度计算#e#\r\n#fs:10;wt:400#小球碰撞的时候根据动量守恒和能量守恒进行物理数据计算\r\n因为两个小球半径不一定相同，碰撞也不一定为对心碰撞，所以在碰撞计算的时候，取碰撞时两球速度在圆心的连线方向上各自的分量进行计算，小球1得到两个速度分量,圆心连线上的分量fa1,垂直于圆心连线上的分量fa2,小球2对应获取到了fb1,fb2。现在取fa1和fb1做对心碰撞计算，根据能量守恒定理和动量守恒定理计算得到公式如下：\r\nnfa1=[(m1-m2）fa1+2*m2*fb1]/（m1+m2）\r\nnfb1=[(m2-m1）fb1+2*m1*fa1]/（m1+m2）\r\nfa1、fb1代表对心碰撞时的两个速度向量，nfa1、nfb1代表碰撞之后对应的两个速度向量，用得到的碰撞后的速度再结合之前得到的垂直于圆心连线的速度分量fa2,fb2做矢量和，可以得到两球碰撞后各自的新的速度向量。#e#\r\n\r\n','2019-12-10 22:33:59',3,'2019-12-19 17:26:18'),(50,'GitHub clone过于慢的解决办法','#fs:15;wt:800#Windows下在 C:\\Windows\\System32\\drivers\\etc\\hosts添加下面内容#e#\r\n#python#\r\n# GItHub\r\n151.101.112.249 http://global-ssl.fastly.Net\r\n192.30.253.112 http://github.com\r\n151.101.44.249 github.global.ssl.fastly.net\r\n192.30.253.113 github.com\r\n103.245.222.133 assets-cdn.github.com\r\n23.235.47.133 assets-cdn.github.com\r\n203.208.39.104 assets-cdn.github.com\r\n204.232.175.78 documentcloud.github.com\r\n204.232.175.94 gist.github.com\r\n107.21.116.220 help.github.com\r\n207.97.227.252 nodeload.github.com\r\n199.27.76.130 raw.github.com\r\n107.22.3.110 status.github.com\r\n204.232.175.78 training.github.com\r\n207.97.227.243 www.github.com\r\n185.31.16.184 github.global.ssl.fastly.net\r\n185.31.18.133 avatars0.githubusercontent.com\r\n185.31.19.133 avatars1.githubusercontent.com\r\n#endpython#\r\n#fs:15;wt:800#添加之后保存,打开cmd输入刷新指令#e#\r\n#python#ipconfig /flushdns#endpython#','2019-12-19 22:55:09',3,NULL),(51,'python常用的math函数','#python#import math\r\n \r\n# 返回数字的绝对值，如abs(-10)返回10\r\nprint(abs(-10))\r\n# 返回数字向上取整的结果\r\nprint(math.ceil(1.3))\r\n# 比较两个数\r\nimport operator\r\nprint(operator.eq(1, 1))\r\nprint(operator.ne(1, 1))\r\nprint(operator.ge(1, 1))\r\nprint(operator.gt(1, 1))\r\nprint(operator.le(1, 1))\r\nprint(operator.lt(1, 1))\r\n# 返回e的x次幂\r\nprint(math.exp(2))\r\n# 浮点数的形式返回绝对值\r\nprint(math.fabs(-10.5))\r\n# 返回向下取整的结果\r\nprint(math.floor(3.3))\r\n# 返回以e为底的对数结果\r\nprint(math.log(math.e))\r\n# 返回以10为底的对数结果\r\nprint(math.log10(10))\r\n# 返回以2为底的对数结果\r\nprint(math.log2(2))\r\n# 最大值\r\nprint(max(1, 2, 3, 4, 5))\r\n# 最小值\r\nprint(min(1, 2, 3, 4, 5))\r\n# 返回模除以后的商和余数\r\nprint(divmod(5, 2))\r\n# 返回一个浮点数的小数部分和整数部分\r\nprint(\"modf\", math.modf(2.33))\r\n# 返回模运算后的余数部分\r\nprint(\"fmod\", math.fmod(5, 2))\r\n# 求x的y次方，同x**y\r\nprint(pow(2, 3))\r\n# 四舍五入，后面指定位数\r\nprint(round(3.222, 2))\r\n# 求平方根\r\nprint(math.sqrt(16))\r\n \r\n \r\n\"\"\"三角函数\"\"\"\r\n# 反余弦\r\nprint(math.acos(0.5))\r\n# 反正弦\r\nprint(math.asin(0.5))\r\n\"\"\"\r\natan2(y, x)是4象限反正切，它的取值不仅取决于正切值y/x，还取决于点 (x, y) 落入哪个象限：\r\n当点(x, y) 落入第一象限时，atan2(y, x)的范围是 0 ~ pi/2;\r\n当点(x, y) 落入第二象限时，atan2(y, x)的范围是 pi/2 ~ pi;\r\n当点(x, y) 落入第三象限时，atan2(y, x)的范围是 －pi～－pi/2;\r\n当点(x, y) 落入第四象限时，atan2(y, x)的范围是 -pi/2～0.\r\n而 atan(y/x) 仅仅根据正切值为y/x求出对应的角度 （可以看作仅仅是2象限反正切）：\r\n当 y/x &gt; 0 时，atan(y/x)取值范围是 0 ~ pi/2；\r\n当 y/x &lt; 0 时，atan(y/x)取值范围是 -pi/2～0.\r\n\"\"\"\r\n# 反正切\r\nprint(math.atan(0.5))\r\n# 四象限反正切\r\nprint(math.atan2(0.5, 0.5))\r\nprint(math.sin(math.pi/2))\r\nprint(math.cos(math.pi/2))\r\nprint(math.tan(math.pi/2))\r\n# 返回欧几里得范数，也就是x*x+y*y的值\r\nprint(math.hypot(2, 3))\r\n# 弧度转角度\r\nprint(math.degrees(math.pi/2))\r\n# 角度转弧度\r\nprint(math.radians(90)#endpython#\r\n<br>','2019-12-23 21:18:56',3,NULL),(52,'MySQL学习笔记','#fs:25;wt:800#一、添加外键语法#e#\r\n\r\n#fs:15;wt:800#constraint #co(255,0,0)#key_name#e# foreign key(#co(255,0,0)#A#e#) references #co(255,0,0)#table_A#e#(#co(255,0,0)#table_A_PRI#e#) on delete #co(255,0,0)#cascade#e# on update #co(255,0,0)#restrict#e##e#\r\n红色部分为可选参数，黑色部分为固定语法。\r\n1、key_name表示这个外键的名称\r\n2、A代表将此表中的某个列A设定为外键\r\n3、table_A代表此外键指向的父表\r\n4、table_A_PRI代表父表中作为外键指向的主键。\r\n5、on delete cascade代表当父表中的对应项被删除时子表的行为,除了Cascade外还有No Action、Restrict、Set Null几个可选值。\r\n具体含义如下：\r\n#python#\r\n当取值为No Action或者Restrict时，则当在父表（即外键的来源表）中删除对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除。\r\n\r\n当取值为Cascade时，则当在父表（即外键的来源表）中删除对应记录时，首先检查该记录是否有对应外键，如果有则也删除外键在子表（即包含外键的表）中的记录。\r\n\r\n当取值为Set Null时，则当在父表（即外键的来源表）中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（不过这就要求该外键允许取null）。\r\n#endpython#\r\n6、on update restrict代表当父表中对应项中外键指向的主键发生变化时子表的行为，可选值与上面一样。\r\n具体含义如下：\r\n#python#\r\n当取值为No Action或者Restrict时，则当在父表（即外键的来源表）中更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许更新。\r\n\r\n当取值为Cascade时，则当在父表（即外键的来源表）中更新对应记录时，首先检查该记录是否有对应外键，如果有则也更新外键在子表（即包含外键的表）中的记录。\r\n\r\n当取值为Set Null时，则当在父表（即外键的来源表）中更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（不过这就要求该外键允许取null）。\r\n#endpython#\r\n#fs:25;wt:800#二、创建触发器#e#\r\n#fs:15;wt:800#CREATE TRIGGER #co(255,0,0)#trigger_name#e# #co(255,0,0)#trigger_time#e# #co(255,0,0)#trigger_event#e# ON #co(255,0,0)#tb_name#e# FOR EACH ROW #co(255,0,0)#trigger_stmt#e##e#\r\n红色部分为可选参数，黑色部分为固定语法。\r\n1、trigger_name：触发器的名称\r\n2、tirgger_time：触发时机，为BEFORE或者AFTER\r\n3、trigger_event：触发事件，为INSERT、DELETE或者UPDATE\r\n4、tb_name：表示建立触发器的表明，就是在哪张表上建立触发器\r\n5、trigger_stmt：触发器的程序体，可以是一条SQL语句或者是用BEGIN和END包含的多条语句\r\n举例如下：\r\n#python#\r\ndelimiter &amp;&amp;\r\ncreate trigger Tri_givelike_before before insert on likes for each row \r\n	begin\r\n		select count(*) from likes where target=NEW.target and source=NEW.source into@c;\r\n		if @c&gt;0 then\r\n			insert into error values(\'alerdy exists!\');\r\n		end if;\r\n	end&amp;&amp;\r\ndelimiter ;\r\n#endpython#\r\n在此有一个比较特殊的地方，因为[;]符号在mysql中代表一个语句的结束，而在begin和end中间执行的sql语句就需要用到[;]来结束一条语句，但是在end结束后我们也需要一个[;]来对整个创建触发器语句进行结束，所以使用#co(255,100,50)#delimiter#e#命令解决这个问题，delimiter可以修改结束符号，我们可以在创建触发器开始之前将结束符改为[&amp;&amp;]，然后在end后用[&amp;&amp;]结束这个创建语句，结束后再使用delimiter将结束符改回[;]即可。','2020-02-04 19:47:43',3,'2020-02-04 19:55:50');
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comment`
--

DROP TABLE IF EXISTS `comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comment` (
  `com_id` int(11) NOT NULL AUTO_INCREMENT,
  `com_content` varchar(2000) NOT NULL,
  `com_like` int(11) NOT NULL,
  `com_date` datetime DEFAULT NULL,
  `art_id` int(11) DEFAULT NULL,
  `sender_id` int(11) DEFAULT NULL,
  `target_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`com_id`),
  KEY `art_id` (`art_id`),
  KEY `sender_id` (`sender_id`),
  KEY `target_id` (`target_id`),
  CONSTRAINT `comment_ibfk_1` FOREIGN KEY (`art_id`) REFERENCES `article` (`art_id`),
  CONSTRAINT `comment_ibfk_2` FOREIGN KEY (`sender_id`) REFERENCES `user` (`user_id`),
  CONSTRAINT `comment_ibfk_3` FOREIGN KEY (`target_id`) REFERENCES `user` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comment`
--

LOCK TABLES `comment` WRITE;
/*!40000 ALTER TABLE `comment` DISABLE KEYS */;
INSERT INTO `comment` VALUES (1,'1111',0,'2019-07-10 16:29:52',4,4,NULL),(2,'dsafsdfsdfsdf',0,'2019-07-10 16:30:04',4,3,4),(5,'fdsaf',0,'2019-07-12 10:42:16',4,3,3),(6,'正常手机端访问看起来也挺正常的，还行',0,'2019-07-14 00:59:55',4,3,NULL),(7,'你这个评论按钮我找了半天',0,'2019-07-18 10:54:55',4,5,3),(8,'巨尼玛小',0,'2019-07-18 10:55:11',4,5,NULL),(9,'不好放到哪里去，除了吐槽你可以给点有用的意见吗',0,'2019-07-18 11:08:30',4,3,5),(10,'看看评论时间',0,'2019-07-18 11:19:52',11,3,NULL),(11,'来，回复我。我要看效果',0,'2019-07-19 15:49:36',4,5,3),(12,'测试评论',0,'2019-07-19 21:14:54',13,6,NULL),(13,'大傻子，你去评论我啊',0,'2019-07-20 11:36:22',NULL,3,NULL),(14,'每30秒会自动刷新一下消息状态',0,'2019-07-20 11:36:54',NULL,3,NULL),(15,'最快能多少秒？',0,'2019-07-20 14:35:35',NULL,5,3),(16,'回复后刷新界面回到最上面很难受啊',0,'2019-07-20 14:36:19',NULL,5,3),(17,'想改多少就多少，30是为了减少服务器压力，这个本来就不是用来实时聊天的',0,'2019-07-20 14:36:46',NULL,3,5),(18,'我再回复一条',0,'2019-07-20 14:37:16',NULL,5,3),(19,'这就是没用ajax的问题了，这个功能做的比较早，是真的用表单提交的，必须刷新页面，，之后很多ajax做的可以动态刷新局部数据。',0,'2019-07-20 14:37:45',NULL,3,5),(20,'。。。自己慢慢改，我觉得还是很有必要有的',0,'2019-07-20 14:39:01',NULL,5,3),(21,'自己回复自己会咋样。我看看',0,'2019-07-20 14:39:39',NULL,5,5),(22,'很多做的太早的功能都有一些问题，真的是懒得去改了。新东西都不够时间做',0,'2019-07-20 14:39:51',NULL,3,5),(23,'自己回复自己的文章和自己的回复是不会有消息提示的。',0,'2019-07-20 14:40:19',NULL,3,5),(24,'消息回复一定要回到文章下面才能回复么？在消息提示那回复会不会好点？',0,'2019-07-20 14:41:06',NULL,5,3),(25,'这是针对文章下的评论来进行回复，到文章这里来比较好，玩贴吧你要回复别人对你的回复，还不是要到对应帖子下面的评论区去发吗',0,'2019-07-20 14:44:38',NULL,3,5),(26,'等私聊留言做完，就搞成每个给你留言的用户单独有个窗口，直接在那里说话就行了。',0,'2019-07-20 14:47:44',NULL,3,5),(27,'。。你这标签写的，这里的富文本编辑器有一套自己的语法，不适用html标签的',0,'2019-07-31 23:10:35',NULL,3,NULL),(28,'为啥发布文章里写不了字了。。。',0,'2019-08-02 09:59:34',NULL,7,3),(29,'写在左边。右边是显示用的',0,'2019-08-03 10:21:51',NULL,3,7),(30,'IE有兼容性问题，基本算是不能用IE正常用这个网站',0,'2019-08-03 10:22:50',NULL,3,NULL),(31,'我用的是firefox。这个浏览器上无法拖动留言板的标签，无法使用富文本编辑器，右上角的消息提示无法消除。',0,'2019-08-03 16:36:05',NULL,7,3),(32,'消除消息提示的方法太刁钻。。。。。。。',0,'2019-08-03 16:37:17',NULL,7,7),(33,'测试评论1',0,'2019-08-14 17:34:12',NULL,5,3),(34,'没用ajax。',0,'2019-08-14 17:34:51',NULL,5,3),(35,'测试你个鸡儿，上次不就说过了吗',0,'2019-08-19 18:31:50',NULL,3,5),(36,'在Windows上也可以用/',0,'2019-08-20 23:45:17',13,7,NULL),(37,'至少在我python这里好像不太行，获取字符串前面加r。',0,'2019-08-20 23:53:46',13,3,7),(38,'或者字符串前面加r',0,'2019-08-20 23:54:06',13,3,3),(39,'java好像可以。。。那个右上角消息提醒里的时间好像有点问题',0,'2019-08-20 23:59:46',13,7,3),(40,'我看好像也有点问题。消息栏里看好像时间显示不对。。到文章下面看又没问题，你是不是也这样？',0,'2019-08-21 00:01:01',13,3,7),(41,'我检查一哈。。',0,'2019-08-21 00:01:50',13,3,7),(42,'是的，上次我以为你晚上2点发消息就是因为消息提示的时间显示是晚上两点。。。。',0,'2019-08-21 00:02:53',13,7,3),(43,'。。神奇',0,'2019-08-21 00:04:56',13,3,7),(44,'我是渣男',0,'2019-08-23 17:52:53',26,7,NULL),(45,'诶呦',0,'2019-08-23 17:53:04',26,7,7);
/*!40000 ALTER TABLE `comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `messagetag`
--

DROP TABLE IF EXISTS `messagetag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `messagetag` (
  `mes_id` int(11) NOT NULL AUTO_INCREMENT,
  `mes_content` varchar(50) NOT NULL,
  PRIMARY KEY (`mes_id`)
) ENGINE=InnoDB AUTO_INCREMENT=84 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `messagetag`
--

LOCK TABLES `messagetag` WRITE;
/*!40000 ALTER TABLE `messagetag` DISABLE KEYS */;
INSERT INTO `messagetag` VALUES (3,'留言系统就这样了'),(4,'只有一个自制的简单富文本编辑器，先勉强用着吧'),(5,'牛批'),(13,'丑点就丑点吧。好歹自己一行一行写出来的。。'),(14,'这个博客对IE的兼容性很差，JQ有很多不适配 IE。'),(15,'帆哥你这界面也太丑了吧，求你找个模板吧！'),(16,'隔壁老王到此一游');
/*!40000 ALTER TABLE `messagetag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `notification`
--

DROP TABLE IF EXISTS `notification`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `notification` (
  `noti_id` int(11) NOT NULL AUTO_INCREMENT,
  `noti_message` text,
  `noti_isread` tinyint(1) DEFAULT NULL,
  `noti_timestamp` datetime DEFAULT NULL,
  `noti_type` int(11) NOT NULL,
  `receiver_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`noti_id`),
  KEY `receiver_id` (`receiver_id`),
  KEY `ix_notification_noti_timestamp` (`noti_timestamp`),
  CONSTRAINT `notification_ibfk_1` FOREIGN KEY (`receiver_id`) REFERENCES `user` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=32 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `notification`
--

LOCK TABLES `notification` WRITE;
/*!40000 ALTER TABLE `notification` DISABLE KEYS */;
INSERT INTO `notification` VALUES (1,'<a href=\'/userpage/6\'>newUser</a>在您的文章<a href=\'/article/13\'>部署小细节</a>中发表了评论。<div class=\'notiText\'>测试评论</div>',1,'2019-07-19 13:14:55',1,3),(2,'<a href=\'/userpage/3\'>帆哥</a>在您的文章<a href=\'/article/14\'>快来评论</a>中发表了评论。<div class=\'notiText\'>大傻子，你去评论我啊</div>',1,'2019-07-20 03:36:22',1,5),(3,'<a href=\'/userpage/3\'>帆哥</a>在您的文章<a href=\'/article/14\'>快来评论</a>中发表了评论。<div class=\'notiText\'>每30秒会自动刷新一下消息状态</div>',1,'2019-07-20 03:36:55',1,5),(4,'<a href=\'/userpage/5\'>大浪</a>对您的评论<a href=\'/article/14?skip=14\'>每30秒会自动刷......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>最快能多少秒？</div>',1,'2019-07-20 06:35:36',2,3),(5,'<a href=\'/userpage/5\'>大浪</a>对您的评论<a href=\'/article/14?skip=13\'>大傻子，你去评论......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>回复后刷新界面回到最上面很难受啊</div>',1,'2019-07-20 06:36:19',2,3),(6,'<a href=\'/userpage/3\'>帆哥</a>对您的评论<a href=\'/article/14?skip=15\'>最快能多少秒？......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>想改多少就多少，30是为了减少服务器压力，这个本来就不是用来实时聊天的</div>',1,'2019-07-20 06:36:46',2,5),(7,'<a href=\'/userpage/5\'>大浪</a>对您的评论<a href=\'/article/14?skip=14\'>每30秒会自动刷......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>我再回复一条</div>',1,'2019-07-20 06:37:17',2,3),(8,'<a href=\'/userpage/3\'>帆哥</a>对您的评论<a href=\'/article/14?skip=16\'>回复后刷新界面回......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>这就是没用ajax的问题了，这个功能做的比较早，是真的用表单提交的，必须刷新页面，，之后很多ajax做的可以动态刷新局部数据。</div>',1,'2019-07-20 06:37:46',2,5),(9,'<a href=\'/userpage/5\'>大浪</a>对您的评论<a href=\'/article/14?skip=19\'>这就是没用aja......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>。。。自己慢慢改，我觉得还是很有必要有的</div>',1,'2019-07-20 06:39:01',2,3),(10,'<a href=\'/userpage/3\'>帆哥</a>对您的评论<a href=\'/article/14?skip=20\'>。。。自己慢慢改......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>很多做的太早的功能都有一些问题，真的是懒得去改了。新东西都不够时间做</div>',1,'2019-07-20 06:39:52',2,5),(11,'<a href=\'/userpage/3\'>帆哥</a>对您的评论<a href=\'/article/14?skip=21\'>自己回复自己会咋......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>自己回复自己的文章和自己的回复是不会有消息提示的。</div>',1,'2019-07-20 06:40:19',2,5),(12,'<a href=\'/userpage/5\'>大浪</a>对您的评论<a href=\'/article/14?skip=22\'>很多做的太早的功......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>消息回复一定要回到文章下面才能回复么？在消息提示那回复会不会好点？</div>',1,'2019-07-20 06:41:06',2,3),(13,'<a href=\'/userpage/3\'>帆哥</a>对您的评论<a href=\'/article/14?skip=24\'>消息回复一定要回......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>这是针对文章下的评论来进行回复，到文章这里来比较好，玩贴吧你要回复别人对你的回复，还不是要到对应帖子下面的评论区去发吗</div>',1,'2019-07-20 06:44:39',2,5),(14,'<a href=\'/userpage/3\'>帆哥哒哒哒哒</a>对您的评论<a href=\'/article/14?skip=24\'>消息回复一定要回......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>等私聊留言做完，就搞成每个给你留言的用户单独有个窗口，直接在那里说话就行了。</div>',0,'2019-07-20 06:47:45',2,5),(15,'<a href=\'/userpage/3\'>帆哥</a>在您的文章<a href=\'/article/16\'>凡哥牛皮</a>中发表了评论。<div class=\'notiText\'>。。你这标签写的，这里的富文本编辑器有一套自己的语法，不适用html标签的</div>',1,'2019-07-31 15:10:35',1,7),(16,'<a href=\'/userpage/7\'>昊哥</a>对您的评论<a href=\'/article/16?skip=27\'>。。你这标签写的......</a>进行了回复。 目标文章：<a href=\'/article/16\'>凡哥牛皮</a><div class=\'notiText\'>为啥发布文章里写不了字了。。。</div>',1,'2019-08-02 01:59:35',2,3),(17,'<a href=\'/userpage/3\'>帆哥</a>对您的评论<a href=\'/article/16?skip=28\'>为啥发布文章里写......</a>进行了回复。 目标文章：<a href=\'/article/16\'>凡哥牛皮</a><div class=\'notiText\'>写在左边。右边是显示用的</div>',1,'2019-08-03 02:21:51',2,7),(18,'<a href=\'/userpage/3\'>帆哥</a>在您的文章<a href=\'/article/17\'></a>中发表了评论。<div class=\'notiText\'>IE有兼容性问题，基本算是不能用IE正常用这个网站</div>',1,'2019-08-03 02:22:50',1,7),(19,'<a href=\'/userpage/7\'>昊哥</a>对您的评论<a href=\'/article/17?skip=30\'>IE有兼容性问题......</a>进行了回复。 目标文章：<a href=\'/article/17\'>IE有兼容性问题</a><div class=\'notiText\'>我用的是firefox。这个浏览器上无法拖动留言板的标签，无法使用富文本编辑器，右上角的消息提示无法消除。</div>',1,'2019-08-03 08:36:06',2,3),(20,'<a href=\'/userpage/5\'>大浪</a>对您的评论<a href=\'/article/14?skip=26\'>等私聊留言做完，......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>测试评论1</div>',1,'2019-08-14 09:34:13',2,3),(21,'<a href=\'/userpage/5\'>大浪</a>对您的评论<a href=\'/article/14?skip=26\'>等私聊留言做完，......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>没用ajax。</div>',1,'2019-08-14 09:34:52',2,3),(22,'<a href=\'/userpage/3\'>帆哥</a>对您的评论<a href=\'/article/14?skip=34\'>没用ajax。......</a>进行了回复。 目标文章：<a href=\'/article/14\'>快来评论</a><div class=\'notiText\'>测试你个鸡儿，上次不就说过了吗</div>',0,'2019-08-19 10:31:50',2,5),(23,'<a href=\'/userpage/7\'>昊哥</a>在您的文章<a href=\'/article/13\'>部署小细节</a>中发表了评论。<div class=\'notiText\'>在Windows上也可以用/</div>',1,'2019-08-20 15:45:18',1,3),(24,'<a href=\'/userpage/3\'>帆哥</a>对您的评论<a href=\'/article/13?skip=36\'>在Windows......</a>进行了回复。 目标文章：<a href=\'/article/13\'>部署小细节</a><div class=\'notiText\'>至少在我python这里好像不太行，获取字符串前面加r。</div>',1,'2019-08-20 15:53:47',2,7),(25,'<a href=\'/userpage/7\'>昊哥</a>对您的评论<a href=\'/article/13?skip=38\'>或者字符串前面加......</a>进行了回复。 目标文章：<a href=\'/article/13\'>部署小细节</a><div class=\'notiText\'>java好像可以。。。那个右上角消息提醒里的时间好像有点问题</div>',1,'2019-08-20 15:59:47',2,3),(26,'<a href=\'/userpage/3\'>帆哥</a>对您的评论<a href=\'/article/13?skip=39\'>java好像可以......</a>进行了回复。 目标文章：<a href=\'/article/13\'>部署小细节</a><div class=\'notiText\'>我看好像也有点问题。消息栏里看好像时间显示不对。。到文章下面看又没问题，你是不是也这样？</div>',1,'2019-08-20 16:01:01',2,7),(27,'<a href=\'/userpage/3\'>帆哥</a>对您的评论<a href=\'/article/13?skip=39\'>java好像可以......</a>进行了回复。 目标文章：<a href=\'/article/13\'>部署小细节</a><div class=\'notiText\'>我检查一哈。。</div>',1,'2019-08-20 16:01:51',2,7),(28,'<a href=\'/userpage/7\'>昊哥</a>对您的评论<a href=\'/article/13?skip=41\'>我检查一哈。。......</a>进行了回复。 目标文章：<a href=\'/article/13\'>部署小细节</a><div class=\'notiText\'>是的，上次我以为你晚上2点发消息就是因为消息提示的时间显示是晚上两点。。。。</div>',1,'2019-08-20 16:02:54',2,3),(29,'<a href=\'/userpage/3\'>帆哥</a>对您的评论<a href=\'/article/13?skip=42\'>是的，上次我以为......</a>进行了回复。 目标文章：<a href=\'/article/13\'>部署小细节</a><div class=\'notiText\'>。。神奇</div>',1,'2019-08-20 16:04:56',2,7),(30,'<a href=\'/userpage/7\'>昊哥</a>在您的文章<a href=\'/article/26\'>数据结构&算法：栈 C++实现</a>中发表了评论。<div class=\'notiText\'>我是渣男</div>',1,'2019-08-23 17:52:53',1,3),(31,'<a href=\'/userpage/7\'>昊哥</a>在您的文章<a href=\'/article/26\'>数据结构&算法：栈 C++实现</a>中发表了评论。<div class=\'notiText\'>诶呦</div>',1,'2019-08-23 17:53:04',1,3);
/*!40000 ALTER TABLE `notification` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roles`
--

DROP TABLE IF EXISTS `roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `roles` (
  `roles_id` int(11) NOT NULL AUTO_INCREMENT,
  `roles_name` varchar(10) NOT NULL,
  PRIMARY KEY (`roles_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `roles`
--

LOCK TABLES `roles` WRITE;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` VALUES (1,'admin'),(2,'normal');
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user`
--

DROP TABLE IF EXISTS `user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_username` varchar(20) NOT NULL,
  `user_name` varchar(20) NOT NULL,
  `user_passwd_hash` varchar(100) DEFAULT NULL,
  `user_lvl` int(11) NOT NULL,
  `user_exp` int(11) NOT NULL,
  `user_reg_date` datetime NOT NULL,
  `user_email` varchar(30) NOT NULL,
  `user_permissions` int(11) NOT NULL,
  `user_confirm` tinyint(1) NOT NULL,
  `user_introduce` text,
  `roles_id` int(11) DEFAULT NULL,
  `user_photo` varchar(100) NOT NULL,
  PRIMARY KEY (`user_id`),
  KEY `roles_id` (`roles_id`),
  KEY `ix_user_user_username` (`user_username`),
  CONSTRAINT `user_ibfk_1` FOREIGN KEY (`roles_id`) REFERENCES `roles` (`roles_id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (3,'tzf','帆哥','pbkdf2:sha256:150000$JuYpXjQk$30c78319a537106f1315b77c38d5c35f75264435dfc82696545917b7313e5915',1,0,'2019-07-09 00:00:00','547250643@qq.com',7,1,'啊啊啊啊啊啊',1,'tzf.jpg'),(4,'zsf','冰函','pbkdf2:sha256:150000$uzkoWSH2$814f1f05063dd1d744b0ff9066224e366bfcc1469433ff270d3bce18bc43561c',1,0,'2019-07-10 00:00:00','2584620447@qq.com',7,1,'',2,'default_photo.jpg'),(5,'Bbullet','大浪','pbkdf2:sha256:150000$DJ72p6jF$49f23395ee63c43e6cd6487d77a62388d41197af70f85512f9a411d95a83216d',1,0,'2019-07-11 00:00:00','1093570153@qq.com',7,1,'？？？？？',2,'Bbullet.jpg'),(6,'qqq','小耗子','pbkdf2:sha256:150000$XO0J3YXZ$c3a8b4d6ace433cd119111ea0471dd94292ee1bbd1c57fbdef192d46c9c84c08',1,0,'2019-07-19 21:13:16','123@qq.com',7,1,'开启我心爱的小耗子~~~',2,'qqq.jpg'),(7,'昊哥','昊哥','pbkdf2:sha256:150000$jMyl3WuO$5545a83d824cfd03b999c31e7aeb42df7c1e06f0a2fbcc7cc27560f686a8a90a',1,0,'2019-07-31 22:59:48','2992300515@qq.com',7,1,'我是要成为海贼王的男人',2,'昊哥.jpg'),(8,'李云龙','newUser','pbkdf2:sha256:150000$9Uojsu66$33f8fd192cc39b57f62afe26fc27913291a0564ebd0e0421f3c083a97994c473',1,0,'2019-09-18 17:40:15','1556075797@qq.com',7,1,NULL,2,'default_photo.jpg'),(9,'1','5','pbkdf2:sha256:150000$69WRKX2Z$a6a3f87a117bd5058fcd09154753e66203f27ff752111f12ecda59a305a97c6e',1,0,'2019-09-24 15:52:20','1@qq.com',3,1,'None',2,'default_photo.jpg'),(10,'4','newUser','pbkdf2:sha256:150000$GwrLBRxV$9b626aa801c69361be3c9d12b92f33a49059c7f5c98e62e21d8e973f34f87b19',1,0,'2019-09-27 15:53:17','4@qq.com',3,1,'',2,'default_photo.jpg'),(11,'newtzf','帆哥..','pbkdf2:sha256:150000$cPr26Xux$0b5575a9afd4a39a41217e857355d61db527489788b19dba79b8c7a3df31aa73',1,0,'2019-11-21 09:27:19','123213@qq.com',7,1,'我居然把自己的老账号密码忘了？？',2,'default_photo.jpg');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2020-02-05 10:31:37
